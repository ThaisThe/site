h3.svelte-ycjrao.svelte-ycjrao{text-align:left;margin-top:2em;font-weight:normal;font-size:2em}.ideogram-pinyin.svelte-ycjrao.svelte-ycjrao{display:inline-block}.pinyin.svelte-ycjrao.svelte-ycjrao{font-size:0.7em;color:#999;font-weight:normal}p.svelte-ycjrao.svelte-ycjrao{margin:0;padding:0}.ideogram.svelte-ycjrao.svelte-ycjrao{font-weight:normal;font-size:1em}.teas.svelte-ycjrao td.svelte-ycjrao,.teas.svelte-ycjrao th.svelte-ycjrao{font-size:0.8em;border:1px solid #ccc}.teas.svelte-ycjrao td:first-child .ideogram.svelte-ycjrao{font-size:1.2em;text-decoration:underline;width:90px}ul.svelte-ycjrao.svelte-ycjrao{font-size:0.8em;list-style:none;padding:0;margin:0}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */