.item.svelte-bdnybl{cursor:default;height:var(--height, 42px);line-height:var(--height, 42px);padding:var(--itemPadding, 0 20px);color:var(--itemColor, inherit);text-overflow:ellipsis;overflow:hidden;white-space:nowrap}.groupHeader.svelte-bdnybl{text-transform:var(--groupTitleTextTransform, uppercase)}.groupItem.svelte-bdnybl{padding-left:var(--groupItemPaddingLeft, 40px)}.item.svelte-bdnybl:active{background:var(--itemActiveBackground, #b9daff)}.item.active.svelte-bdnybl{background:var(--itemIsActiveBG, #007aff);color:var(--itemIsActiveColor, #fff)}.item.first.svelte-bdnybl{border-radius:var(--itemFirstBorderRadius, 4px 4px 0 0)}.item.hover.svelte-bdnybl:not(.active){background:var(--itemHoverBG, #e7f2ff)}
svelte-virtual-list-viewport.svelte-p6ehlv{position:relative;overflow-y:auto;-webkit-overflow-scrolling:touch;display:block}svelte-virtual-list-contents.svelte-p6ehlv,svelte-virtual-list-row.svelte-p6ehlv{display:block}svelte-virtual-list-row.svelte-p6ehlv{overflow:hidden}
.listContainer.svelte-ux0sbr{box-shadow:var(--listShadow, 0 2px 3px 0 rgba(44, 62, 80, 0.24));border-radius:var(--listBorderRadius, 4px);max-height:var(--listMaxHeight, 250px);overflow-y:auto;background:var(--listBackground, #fff)}.virtualList.svelte-ux0sbr{height:var(--virtualListHeight, 200px)}.listGroupTitle.svelte-ux0sbr{color:var(--groupTitleColor, #8f8f8f);cursor:default;font-size:var(--groupTitleFontSize, 12px);font-weight:var(--groupTitleFontWeight, 600);height:var(--height, 42px);line-height:var(--height, 42px);padding:var(--groupTitlePadding, 0 20px);text-overflow:ellipsis;overflow-x:hidden;white-space:nowrap;text-transform:var(--groupTitleTextTransform, uppercase)}.empty.svelte-ux0sbr{text-align:var(--listEmptyTextAlign, center);padding:var(--listEmptyPadding, 20px 0);color:var(--listEmptyColor, #78848F)}
.selection.svelte-ch6bh7{text-overflow:ellipsis;overflow-x:hidden;white-space:nowrap}
.multiSelectItem.svelte-rtzfov.svelte-rtzfov{background:var(--multiItemBG, #EBEDEF);margin:var(--multiItemMargin, 5px 5px 0 0);border-radius:var(--multiItemBorderRadius, 16px);height:var(--multiItemHeight, 32px);line-height:var(--multiItemHeight, 32px);display:flex;cursor:default;padding:var(--multiItemPadding, 0 10px 0 15px)}.multiSelectItem_label.svelte-rtzfov.svelte-rtzfov{margin:var(--multiLabelMargin, 0 5px 0 0)}.multiSelectItem.svelte-rtzfov.svelte-rtzfov:hover,.multiSelectItem.active.svelte-rtzfov.svelte-rtzfov{background-color:var(--multiItemActiveBG, #006FFF);color:var(--multiItemActiveColor, #fff)}.multiSelectItem.disabled.svelte-rtzfov.svelte-rtzfov:hover{background:var(--multiItemDisabledHoverBg, #EBEDEF);color:var(--multiItemDisabledHoverColor, #C1C6CC)}.multiSelectItem_clear.svelte-rtzfov.svelte-rtzfov{border-radius:var(--multiClearRadius, 50%);background:var(--multiClearBG, #52616F);width:var(--multiClearWidth, 16px);height:var(--multiClearHeight, 16px);position:relative;top:var(--multiClearTop, 8px);text-align:var(--multiClearTextAlign, center);padding:var(--multiClearPadding, 1px)}.multiSelectItem_clear.svelte-rtzfov.svelte-rtzfov:hover,.active.svelte-rtzfov .multiSelectItem_clear.svelte-rtzfov{background:var(--multiClearHoverBG, #fff)}.multiSelectItem_clear.svelte-rtzfov:hover svg.svelte-rtzfov,.active.svelte-rtzfov .multiSelectItem_clear svg.svelte-rtzfov{fill:var(--multiClearHoverFill, #006FFF)}.multiSelectItem_clear.svelte-rtzfov svg.svelte-rtzfov{fill:var(--multiClearFill, #EBEDEF);vertical-align:top}
.selectContainer.svelte-cr4b6i.svelte-cr4b6i{--padding:0 16px;border:var(--border, 1px solid #d8dbdf);border-radius:var(--borderRadius, 3px);height:var(--height, 42px);position:relative;display:flex;align-items:center;padding:var(--padding);background:var(--background, #fff)}.selectContainer.svelte-cr4b6i input.svelte-cr4b6i{cursor:default;border:none;color:var(--inputColor, #3f4f5f);height:var(--height, 42px);line-height:var(--height, 42px);padding:var(--inputPadding, var(--padding));width:100%;background:transparent;font-size:var(--inputFontSize, 14px);letter-spacing:var(--inputLetterSpacing, -0.08px);position:absolute;left:var(--inputLeft, 0)}.selectContainer.svelte-cr4b6i input.svelte-cr4b6i::placeholder{color:var(--placeholderColor, #78848f)}.selectContainer.svelte-cr4b6i input.svelte-cr4b6i:focus{outline:none}.selectContainer.svelte-cr4b6i.svelte-cr4b6i:hover{border-color:var(--borderHoverColor, #b2b8bf)}.selectContainer.focused.svelte-cr4b6i.svelte-cr4b6i{border-color:var(--borderFocusColor, #006fe8)}.selectContainer.disabled.svelte-cr4b6i.svelte-cr4b6i{background:var(--disabledBackground, #ebedef);border-color:var(--disabledBorderColor, #ebedef);color:var(--disabledColor, #c1c6cc)}.selectContainer.disabled.svelte-cr4b6i input.svelte-cr4b6i::placeholder{color:var(--disabledPlaceholderColor, #c1c6cc)}.selectedItem.svelte-cr4b6i.svelte-cr4b6i{line-height:var(--height, 42px);height:var(--height, 42px);overflow-x:hidden;padding:var(--selectedItemPadding, 0 20px 0 0)}.selectedItem.svelte-cr4b6i.svelte-cr4b6i:focus{outline:none}.clearSelect.svelte-cr4b6i.svelte-cr4b6i{position:absolute;right:var(--clearSelectRight, 10px);top:var(--clearSelectTop, 11px);bottom:var(--clearSelectBottom, 11px);width:var(--clearSelectWidth, 20px);color:var(--clearSelectColor, #c5cacf);flex:none !important}.clearSelect.svelte-cr4b6i.svelte-cr4b6i:hover{color:var(--clearSelectHoverColor, #2c3e50)}.selectContainer.focused.svelte-cr4b6i .clearSelect.svelte-cr4b6i{color:var(--clearSelectFocusColor, #3f4f5f)}.indicator.svelte-cr4b6i.svelte-cr4b6i{position:absolute;right:var(--indicatorRight, 10px);top:var(--indicatorTop, 11px);width:var(--indicatorWidth, 20px);height:var(--indicatorHeight, 20px);color:var(--indicatorColor, #c5cacf)}.indicator.svelte-cr4b6i svg.svelte-cr4b6i{display:inline-block;fill:var(--indicatorFill, currentcolor);line-height:1;stroke:var(--indicatorStroke, currentcolor);stroke-width:0}.spinner.svelte-cr4b6i.svelte-cr4b6i{position:absolute;right:var(--spinnerRight, 10px);top:var(--spinnerLeft, 11px);width:var(--spinnerWidth, 20px);height:var(--spinnerHeight, 20px);color:var(--spinnerColor, #51ce6c);animation:svelte-cr4b6i-rotate 0.75s linear infinite}.spinner_icon.svelte-cr4b6i.svelte-cr4b6i{display:block;height:100%;transform-origin:center center;width:100%;position:absolute;top:0;bottom:0;left:0;right:0;margin:auto;-webkit-transform:none}.spinner_path.svelte-cr4b6i.svelte-cr4b6i{stroke-dasharray:90;stroke-linecap:round}.multiSelect.svelte-cr4b6i.svelte-cr4b6i{display:flex;padding:var(--multiSelectPadding, 0 35px 0 16px);height:auto;flex-wrap:wrap}.multiSelect.svelte-cr4b6i>.svelte-cr4b6i{flex:1 1 50px}.selectContainer.multiSelect.svelte-cr4b6i input.svelte-cr4b6i{padding:var(--multiSelectInputPadding, 0);position:relative;margin:var(--multiSelectInputMargin, 0)}.hasError.svelte-cr4b6i.svelte-cr4b6i{border:var(--errorBorder, 1px solid #ff2d55)}@keyframes svelte-cr4b6i-rotate{100%{transform:rotate(360deg)}}
input.autocomplete-input{margin:0.9em;padding:0}.search.svelte-11cuyks{width:20em;margin:0.6em;--placeholderColor:#73d56b;--borderRadius:4px;--cursor:pointer}
nav.svelte-118k2ex{border-bottom:1px solid rgba(255, 62, 0, 0.1);font-weight:300;padding:0 1em}ul.svelte-118k2ex{margin:0;padding:0}ul.svelte-118k2ex::after{content:'';display:block;clear:both}li.svelte-118k2ex{display:block;float:left}[aria-current].svelte-118k2ex{position:relative;display:inline-block}[aria-current].svelte-118k2ex::after{position:absolute;content:'';width:calc(100% - 1em);height:2px;background-color:rgb(255, 62, 0);display:block;bottom:-1px}a.svelte-118k2ex{font-size:1.2em;text-decoration:none;padding:1em 0.5em;display:block}
h1.svelte-8od9u6,p.svelte-8od9u6{margin:0 auto}h1.svelte-8od9u6{font-size:2.8em;font-weight:700;margin:0 0 0.5em 0}p.svelte-8od9u6{margin:1em auto}@media(min-width: 480px){h1.svelte-8od9u6{font-size:4em}}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi4zOTc2NjkyMzQuY3NzIiwic291cmNlcyI6WyIuLi8uLi8uLi9JdGVtLnN2ZWx0ZSIsIi4uLy4uLy4uL1ZpcnR1YWxMaXN0LnN2ZWx0ZSIsIi4uLy4uLy4uL0xpc3Quc3ZlbHRlIiwiLi4vLi4vLi4vU2VsZWN0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL011bHRpU2VsZWN0aW9uLnN2ZWx0ZSIsIi4uLy4uLy4uL1NlbGVjdC5zdmVsdGUiLCIuLi8uLi8uLi9TZWFyY2guc3ZlbHRlIiwiLi4vLi4vLi4vTmF2LnN2ZWx0ZSIsIi4uLy4uLy4uL19lcnJvci5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBpc0FjdGl2ZSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGlzRmlyc3QgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBpc0hvdmVyID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgZ2V0T3B0aW9uTGFiZWwgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCBsZXQgaXRlbSA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBmaWx0ZXJUZXh0ID0gJyc7XG5cbiAgbGV0IGl0ZW1DbGFzc2VzID0gJyc7XG5cbiAgJDoge1xuICAgIGNvbnN0IGNsYXNzZXMgPSBbXTtcbiAgICBpZiAoaXNBY3RpdmUpIHsgY2xhc3Nlcy5wdXNoKCdhY3RpdmUnKTsgfVxuICAgIGlmIChpc0ZpcnN0KSB7IGNsYXNzZXMucHVzaCgnZmlyc3QnKTsgfVxuICAgIGlmIChpc0hvdmVyKSB7IGNsYXNzZXMucHVzaCgnaG92ZXInKTsgfVxuICAgIGlmIChpdGVtLmlzR3JvdXBIZWFkZXIpIHsgY2xhc3Nlcy5wdXNoKCdncm91cEhlYWRlcicpOyB9XG4gICAgaWYgKGl0ZW0uaXNHcm91cEl0ZW0pIHsgY2xhc3Nlcy5wdXNoKCdncm91cEl0ZW0nKTsgfVxuICAgIGl0ZW1DbGFzc2VzID0gY2xhc3Nlcy5qb2luKCcgJyk7XG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG4gIC5pdGVtIHtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgIHBhZGRpbmc6IHZhcigtLWl0ZW1QYWRkaW5nLCAwIDIwcHgpO1xuICAgIGNvbG9yOiB2YXIoLS1pdGVtQ29sb3IsIGluaGVyaXQpO1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcbiAgfVxuXG4gIC5ncm91cEhlYWRlciB7XG4gICAgdGV4dC10cmFuc2Zvcm06IHZhcigtLWdyb3VwVGl0bGVUZXh0VHJhbnNmb3JtLCB1cHBlcmNhc2UpO1xuICB9XG5cbiAgLmdyb3VwSXRlbSB7XG4gICAgcGFkZGluZy1sZWZ0OiB2YXIoLS1ncm91cEl0ZW1QYWRkaW5nTGVmdCwgNDBweCk7XG4gIH1cblxuICAuaXRlbTphY3RpdmUge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWl0ZW1BY3RpdmVCYWNrZ3JvdW5kLCAjYjlkYWZmKTtcbiAgfVxuXG4gIC5pdGVtLmFjdGl2ZSB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0taXRlbUlzQWN0aXZlQkcsICMwMDdhZmYpO1xuICAgIGNvbG9yOiB2YXIoLS1pdGVtSXNBY3RpdmVDb2xvciwgI2ZmZik7XG4gIH1cblxuICAuaXRlbS5maXJzdCB7XG4gICAgYm9yZGVyLXJhZGl1czogdmFyKC0taXRlbUZpcnN0Qm9yZGVyUmFkaXVzLCA0cHggNHB4IDAgMCk7XG4gIH1cblxuICAuaXRlbS5ob3Zlcjpub3QoLmFjdGl2ZSkge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWl0ZW1Ib3ZlckJHLCAjZTdmMmZmKTtcbiAgfVxuPC9zdHlsZT5cblxuXG5cbjxkaXYgY2xhc3M9XCJpdGVtIHtpdGVtQ2xhc3Nlc31cIj5cbiAge0BodG1sIGdldE9wdGlvbkxhYmVsKGl0ZW0sIGZpbHRlclRleHQpfVxuPC9kaXY+XG4iLCI8c2NyaXB0PlxuXHRpbXBvcnQgeyBvbk1vdW50LCB0aWNrIH0gZnJvbSAnc3ZlbHRlJztcblxuXHQvLyBwcm9wc1xuXHRleHBvcnQgbGV0IGl0ZW1zID0gdW5kZWZpbmVkO1xuXHRleHBvcnQgbGV0IGhlaWdodCA9ICcxMDAlJztcblx0ZXhwb3J0IGxldCBpdGVtSGVpZ2h0ID0gNDA7XG5cdGV4cG9ydCBsZXQgaG92ZXJJdGVtSW5kZXggPSAwO1xuXG5cdC8vIHJlYWQtb25seSwgYnV0IHZpc2libGUgdG8gY29uc3VtZXJzIHZpYSBiaW5kOnN0YXJ0XG5cdGV4cG9ydCBsZXQgc3RhcnQgPSAwO1xuXHRleHBvcnQgbGV0IGVuZCA9IDA7XG5cblx0Ly8gbG9jYWwgc3RhdGVcblx0bGV0IGhlaWdodF9tYXAgPSBbXTtcblx0bGV0IHJvd3M7XG5cdGxldCB2aWV3cG9ydDtcblx0bGV0IGNvbnRlbnRzO1xuXHRsZXQgdmlld3BvcnRfaGVpZ2h0ID0gMDtcblx0bGV0IHZpc2libGU7XG5cdGxldCBtb3VudGVkO1xuXG5cdGxldCB0b3AgPSAwO1xuXHRsZXQgYm90dG9tID0gMDtcblx0bGV0IGF2ZXJhZ2VfaGVpZ2h0O1xuXG5cdCQ6IHZpc2libGUgPSBpdGVtcy5zbGljZShzdGFydCwgZW5kKS5tYXAoKGRhdGEsIGkpID0+IHtcblx0XHRyZXR1cm4geyBpbmRleDogaSArIHN0YXJ0LCBkYXRhIH07XG5cdH0pO1xuXG5cdC8vIHdoZW5ldmVyIGBpdGVtc2AgY2hhbmdlcywgaW52YWxpZGF0ZSB0aGUgY3VycmVudCBoZWlnaHRtYXBcblx0JDogaWYgKG1vdW50ZWQpIHJlZnJlc2goaXRlbXMsIHZpZXdwb3J0X2hlaWdodCwgaXRlbUhlaWdodCk7XG5cblx0YXN5bmMgZnVuY3Rpb24gcmVmcmVzaChpdGVtcywgdmlld3BvcnRfaGVpZ2h0LCBpdGVtSGVpZ2h0KSB7XG5cdFx0Y29uc3QgeyBzY3JvbGxUb3AgfSA9IHZpZXdwb3J0O1xuXG5cdFx0YXdhaXQgdGljaygpOyAvLyB3YWl0IHVudGlsIHRoZSBET00gaXMgdXAgdG8gZGF0ZVxuXG5cdFx0bGV0IGNvbnRlbnRfaGVpZ2h0ID0gdG9wIC0gc2Nyb2xsVG9wO1xuXHRcdGxldCBpID0gc3RhcnQ7XG5cblx0XHR3aGlsZSAoY29udGVudF9oZWlnaHQgPCB2aWV3cG9ydF9oZWlnaHQgJiYgaSA8IGl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0bGV0IHJvdyA9IHJvd3NbaSAtIHN0YXJ0XTtcblxuXHRcdFx0aWYgKCFyb3cpIHtcblx0XHRcdFx0ZW5kID0gaSArIDE7XG5cdFx0XHRcdGF3YWl0IHRpY2soKTsgLy8gcmVuZGVyIHRoZSBuZXdseSB2aXNpYmxlIHJvd1xuXHRcdFx0XHRyb3cgPSByb3dzW2kgLSBzdGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHJvd19oZWlnaHQgPSBoZWlnaHRfbWFwW2ldID0gaXRlbUhlaWdodCB8fCByb3cub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0Y29udGVudF9oZWlnaHQgKz0gcm93X2hlaWdodDtcblx0XHRcdGkgKz0gMTtcblx0XHR9XG5cblx0XHRlbmQgPSBpO1xuXG5cdFx0Y29uc3QgcmVtYWluaW5nID0gaXRlbXMubGVuZ3RoIC0gZW5kO1xuXHRcdGF2ZXJhZ2VfaGVpZ2h0ID0gKHRvcCArIGNvbnRlbnRfaGVpZ2h0KSAvIGVuZDtcblxuXHRcdGJvdHRvbSA9IHJlbWFpbmluZyAqIGF2ZXJhZ2VfaGVpZ2h0O1xuXHRcdGhlaWdodF9tYXAubGVuZ3RoID0gaXRlbXMubGVuZ3RoO1xuXG5cdFx0dmlld3BvcnQuc2Nyb2xsVG9wID0gMDtcblx0fVxuXG5cdGFzeW5jIGZ1bmN0aW9uIGhhbmRsZV9zY3JvbGwoKSB7XG5cdFx0Y29uc3QgeyBzY3JvbGxUb3AgfSA9IHZpZXdwb3J0O1xuXG5cdFx0Y29uc3Qgb2xkX3N0YXJ0ID0gc3RhcnQ7XG5cblx0XHRmb3IgKGxldCB2ID0gMDsgdiA8IHJvd3MubGVuZ3RoOyB2ICs9IDEpIHtcblx0XHRcdGhlaWdodF9tYXBbc3RhcnQgKyB2XSA9IGl0ZW1IZWlnaHQgfHwgcm93c1t2XS5vZmZzZXRIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0bGV0IGkgPSAwO1xuXHRcdGxldCB5ID0gMDtcblxuXHRcdHdoaWxlIChpIDwgaXRlbXMubGVuZ3RoKSB7XG5cdFx0XHRjb25zdCByb3dfaGVpZ2h0ID0gaGVpZ2h0X21hcFtpXSB8fCBhdmVyYWdlX2hlaWdodDtcblx0XHRcdGlmICh5ICsgcm93X2hlaWdodCA+IHNjcm9sbFRvcCkge1xuXHRcdFx0XHRzdGFydCA9IGk7XG5cdFx0XHRcdHRvcCA9IHk7XG5cblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cblx0XHRcdHkgKz0gcm93X2hlaWdodDtcblx0XHRcdGkgKz0gMTtcblx0XHR9XG5cblx0XHR3aGlsZSAoaSA8IGl0ZW1zLmxlbmd0aCkge1xuXHRcdFx0eSArPSBoZWlnaHRfbWFwW2ldIHx8IGF2ZXJhZ2VfaGVpZ2h0O1xuXHRcdFx0aSArPSAxO1xuXG5cdFx0XHRpZiAoeSA+IHNjcm9sbFRvcCArIHZpZXdwb3J0X2hlaWdodCkgYnJlYWs7XG5cdFx0fVxuXG5cdFx0ZW5kID0gaTtcblxuXHRcdGNvbnN0IHJlbWFpbmluZyA9IGl0ZW1zLmxlbmd0aCAtIGVuZDtcblx0XHRhdmVyYWdlX2hlaWdodCA9IHkgLyBlbmQ7XG5cblx0XHR3aGlsZSAoaSA8IGl0ZW1zLmxlbmd0aCkgaGVpZ2h0X21hcFtpKytdID0gYXZlcmFnZV9oZWlnaHQ7XG5cdFx0Ym90dG9tID0gcmVtYWluaW5nICogYXZlcmFnZV9oZWlnaHQ7XG5cblx0XHQvLyBwcmV2ZW50IGp1bXBpbmcgaWYgd2Ugc2Nyb2xsZWQgdXAgaW50byB1bmtub3duIHRlcnJpdG9yeVxuXHRcdGlmIChzdGFydCA8IG9sZF9zdGFydCkge1xuXHRcdFx0YXdhaXQgdGljaygpO1xuXG5cdFx0XHRsZXQgZXhwZWN0ZWRfaGVpZ2h0ID0gMDtcblx0XHRcdGxldCBhY3R1YWxfaGVpZ2h0ID0gMDtcblxuXHRcdFx0Zm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgb2xkX3N0YXJ0OyBpICs9IDEpIHtcblx0XHRcdFx0aWYgKHJvd3NbaSAtIHN0YXJ0XSkge1xuXHRcdFx0XHRcdGV4cGVjdGVkX2hlaWdodCArPSBoZWlnaHRfbWFwW2ldO1xuXHRcdFx0XHRcdGFjdHVhbF9oZWlnaHQgKz0gaXRlbUhlaWdodCB8fCByb3dzW2kgLSBzdGFydF0ub2Zmc2V0SGVpZ2h0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGQgPSBhY3R1YWxfaGVpZ2h0IC0gZXhwZWN0ZWRfaGVpZ2h0O1xuXHRcdFx0dmlld3BvcnQuc2Nyb2xsVG8oMCwgc2Nyb2xsVG9wICsgZCk7XG5cdFx0fVxuXG5cdFx0Ly8gVE9ETyBpZiB3ZSBvdmVyZXN0aW1hdGVkIHRoZSBzcGFjZSB0aGVzZVxuXHRcdC8vIHJvd3Mgd291bGQgb2NjdXB5IHdlIG1heSBuZWVkIHRvIGFkZCBzb21lXG5cdFx0Ly8gbW9yZS4gbWF5YmUgd2UgY2FuIGp1c3QgY2FsbCBoYW5kbGVfc2Nyb2xsIGFnYWluP1xuXHR9XG5cblx0Ly8gdHJpZ2dlciBpbml0aWFsIHJlZnJlc2hcblx0b25Nb3VudCgoKSA9PiB7XG5cdFx0cm93cyA9IGNvbnRlbnRzLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzdmVsdGUtdmlydHVhbC1saXN0LXJvdycpO1xuXHRcdG1vdW50ZWQgPSB0cnVlO1xuXHR9KTtcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtdmlld3BvcnQge1xuXHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRvdmVyZmxvdy15OiBhdXRvO1xuXHRcdC13ZWJraXQtb3ZlcmZsb3ctc2Nyb2xsaW5nOiB0b3VjaDtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0fVxuXG5cdHN2ZWx0ZS12aXJ0dWFsLWxpc3QtY29udGVudHMsXG5cdHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtcm93IHtcblx0XHRkaXNwbGF5OiBibG9jaztcblx0fVxuXG5cdHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtcm93IHtcblx0XHRvdmVyZmxvdzogaGlkZGVuO1xuXHR9XG48L3N0eWxlPlxuXG48c3ZlbHRlLXZpcnR1YWwtbGlzdC12aWV3cG9ydCBiaW5kOnRoaXM9e3ZpZXdwb3J0fSBiaW5kOm9mZnNldEhlaWdodD17dmlld3BvcnRfaGVpZ2h0fSBvbjpzY3JvbGw9e2hhbmRsZV9zY3JvbGx9XG5cdHN0eWxlPVwiaGVpZ2h0OiB7aGVpZ2h0fTtcIj5cblx0PHN2ZWx0ZS12aXJ0dWFsLWxpc3QtY29udGVudHMgYmluZDp0aGlzPXtjb250ZW50c30gc3R5bGU9XCJwYWRkaW5nLXRvcDoge3RvcH1weDsgcGFkZGluZy1ib3R0b206IHtib3R0b219cHg7XCI+XG5cdFx0eyNlYWNoIHZpc2libGUgYXMgcm93IChyb3cuaW5kZXgpfVxuXHRcdFx0PHN2ZWx0ZS12aXJ0dWFsLWxpc3Qtcm93PlxuXHRcdFx0XHQ8c2xvdCBpdGVtPXtyb3cuZGF0YX0gaT17cm93LmluZGV4fSB7aG92ZXJJdGVtSW5kZXh9Pk1pc3NpbmcgdGVtcGxhdGU8L3Nsb3Q+XG5cdFx0XHQ8L3N2ZWx0ZS12aXJ0dWFsLWxpc3Qtcm93PlxuXHRcdHsvZWFjaH1cblx0PC9zdmVsdGUtdmlydHVhbC1saXN0LWNvbnRlbnRzPlxuPC9zdmVsdGUtdmlydHVhbC1saXN0LXZpZXdwb3J0PiIsIjxzY3JpcHQ+XG4gIGltcG9ydCB7IGJlZm9yZVVwZGF0ZSwgY3JlYXRlRXZlbnREaXNwYXRjaGVyLCBvbkRlc3Ryb3ksIG9uTW91bnQsIHRpY2sgfSBmcm9tICdzdmVsdGUnO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG5cbiAgZXhwb3J0IGxldCBjb250YWluZXIgPSB1bmRlZmluZWQ7XG5cbiAgaW1wb3J0IEl0ZW1Db21wb25lbnQgZnJvbSAnLi9JdGVtLnN2ZWx0ZSc7XG4gIGltcG9ydCBWaXJ0dWFsTGlzdCBmcm9tICcuL1ZpcnR1YWxMaXN0LnN2ZWx0ZSc7XG5cbiAgZXhwb3J0IGxldCBJdGVtID0gSXRlbUNvbXBvbmVudDtcbiAgZXhwb3J0IGxldCBpc1ZpcnR1YWxMaXN0ID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgaXRlbXMgPSBbXTtcbiAgZXhwb3J0IGxldCBnZXRPcHRpb25MYWJlbCA9IChvcHRpb24sIGZpbHRlclRleHQpID0+IHtcbiAgICBpZiAob3B0aW9uKSByZXR1cm4gb3B0aW9uLmlzQ3JlYXRvciA/IGBDcmVhdGUgXFxcIiR7ZmlsdGVyVGV4dH1cXFwiYCA6IG9wdGlvbi5sYWJlbDtcbiAgfTtcbiAgZXhwb3J0IGxldCBnZXRHcm91cEhlYWRlckxhYmVsID0gKG9wdGlvbikgPT4geyByZXR1cm4gb3B0aW9uLmxhYmVsIH07XG4gIGV4cG9ydCBsZXQgaXRlbUhlaWdodCA9IDQwO1xuICBleHBvcnQgbGV0IGhvdmVySXRlbUluZGV4ID0gMDtcbiAgZXhwb3J0IGxldCBzZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuICBleHBvcnQgbGV0IG9wdGlvbklkZW50aWZpZXIgPSAndmFsdWUnO1xuICBleHBvcnQgbGV0IGhpZGVFbXB0eVN0YXRlID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgbm9PcHRpb25zTWVzc2FnZSA9ICdObyBvcHRpb25zJztcbiAgZXhwb3J0IGxldCBpc011bHRpID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgYWN0aXZlSXRlbUluZGV4ID0gMDtcbiAgZXhwb3J0IGxldCBmaWx0ZXJUZXh0ID0gJyc7XG5cbiAgbGV0IGlzU2Nyb2xsaW5nVGltZXIgPSAwO1xuICBsZXQgaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgbGV0IHByZXZfaXRlbXM7XG4gIGxldCBwcmV2X2FjdGl2ZUl0ZW1JbmRleDtcbiAgbGV0IHByZXZfc2VsZWN0ZWRWYWx1ZTtcblxuICBvbk1vdW50KCgpID0+IHtcbiAgICBpZiAoaXRlbXMubGVuZ3RoID4gMCAmJiAhaXNNdWx0aSAmJiBzZWxlY3RlZFZhbHVlKSB7XG4gICAgICBjb25zdCBfaG92ZXJJdGVtSW5kZXggPSBpdGVtcy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW1bb3B0aW9uSWRlbnRpZmllcl0gPT09IHNlbGVjdGVkVmFsdWVbb3B0aW9uSWRlbnRpZmllcl0pO1xuXG4gICAgICBpZiAoX2hvdmVySXRlbUluZGV4KSB7XG4gICAgICAgIGhvdmVySXRlbUluZGV4ID0gX2hvdmVySXRlbUluZGV4O1xuICAgICAgfVxuICAgIH1cblxuICAgIHNjcm9sbFRvQWN0aXZlSXRlbSgnYWN0aXZlJyk7XG5cblxuICAgIGNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQoaXNTY3JvbGxpbmdUaW1lcik7XG5cbiAgICAgIGlzU2Nyb2xsaW5nVGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgaXNTY3JvbGxpbmcgPSBmYWxzZTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfSwgZmFsc2UpO1xuICB9KTtcblxuICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgIC8vIGNsZWFyVGltZW91dChpc1Njcm9sbGluZ1RpbWVyKTtcbiAgfSk7XG5cbiAgYmVmb3JlVXBkYXRlKCgpID0+IHtcblxuICAgIGlmIChpdGVtcyAhPT0gcHJldl9pdGVtcyAmJiBpdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICBob3Zlckl0ZW1JbmRleCA9IDA7XG4gICAgfVxuXG5cbiAgICAvLyBpZiAocHJldl9hY3RpdmVJdGVtSW5kZXggJiYgYWN0aXZlSXRlbUluZGV4ID4gLTEpIHtcbiAgICAvLyAgIGhvdmVySXRlbUluZGV4ID0gYWN0aXZlSXRlbUluZGV4O1xuXG4gICAgLy8gICBzY3JvbGxUb0FjdGl2ZUl0ZW0oJ2FjdGl2ZScpO1xuICAgIC8vIH1cbiAgICAvLyBpZiAocHJldl9zZWxlY3RlZFZhbHVlICYmIHNlbGVjdGVkVmFsdWUpIHtcbiAgICAvLyAgIHNjcm9sbFRvQWN0aXZlSXRlbSgnYWN0aXZlJyk7XG5cbiAgICAvLyAgIGlmIChpdGVtcyAmJiAhaXNNdWx0aSkge1xuICAgIC8vICAgICBjb25zdCBob3Zlckl0ZW1JbmRleCA9IGl0ZW1zLmZpbmRJbmRleCgoaXRlbSkgPT4gaXRlbVtvcHRpb25JZGVudGlmaWVyXSA9PT0gc2VsZWN0ZWRWYWx1ZVtvcHRpb25JZGVudGlmaWVyXSk7XG5cbiAgICAvLyAgICAgaWYgKGhvdmVySXRlbUluZGV4KSB7XG4gICAgLy8gICAgICAgaG92ZXJJdGVtSW5kZXggPSBob3Zlckl0ZW1JbmRleDtcbiAgICAvLyAgICAgfVxuICAgIC8vICAgfVxuICAgIC8vIH1cblxuICAgIHByZXZfaXRlbXMgPSBpdGVtcztcbiAgICBwcmV2X2FjdGl2ZUl0ZW1JbmRleCA9IGFjdGl2ZUl0ZW1JbmRleDtcbiAgICBwcmV2X3NlbGVjdGVkVmFsdWUgPSBzZWxlY3RlZFZhbHVlO1xuICB9KTtcblxuICBmdW5jdGlvbiBpdGVtQ2xhc3Nlcyhob3Zlckl0ZW1JbmRleCwgaXRlbSwgaXRlbUluZGV4LCBpdGVtcywgc2VsZWN0ZWRWYWx1ZSwgb3B0aW9uSWRlbnRpZmllciwgaXNNdWx0aSkge1xuICAgIHJldHVybiBgJHtzZWxlY3RlZFZhbHVlICYmICFpc011bHRpICYmIChzZWxlY3RlZFZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBpdGVtW29wdGlvbklkZW50aWZpZXJdKSA/ICdhY3RpdmUgJyA6ICcnfSR7aG92ZXJJdGVtSW5kZXggPT09IGl0ZW1JbmRleCB8fCBpdGVtcy5sZW5ndGggPT09IDEgPyAnaG92ZXInIDogJyd9YDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVNlbGVjdChpdGVtKSB7XG4gICAgaWYgKGl0ZW0uaXNDcmVhdG9yKSByZXR1cm47XG4gICAgZGlzcGF0Y2goJ2l0ZW1TZWxlY3RlZCcsIGl0ZW0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSG92ZXIoaSkge1xuICAgIGlmIChpc1Njcm9sbGluZykgcmV0dXJuO1xuICAgIGhvdmVySXRlbUluZGV4ID0gaTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKGFyZ3MpIHtcbiAgICBjb25zdCB7IGl0ZW0sIGksIGV2ZW50IH0gPSBhcmdzO1xuICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgaWYgKHNlbGVjdGVkVmFsdWUgJiYgIWlzTXVsdGkgJiYgc2VsZWN0ZWRWYWx1ZVtvcHRpb25JZGVudGlmaWVyXSA9PT0gaXRlbVtvcHRpb25JZGVudGlmaWVyXSkgcmV0dXJuIGNsb3NlTGlzdCgpO1xuXG4gICAgaWYgKGl0ZW0uaXNDcmVhdG9yKSB7XG4gICAgICBkaXNwYXRjaCgnaXRlbUNyZWF0ZWQnLCBmaWx0ZXJUZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaTtcbiAgICAgIGhvdmVySXRlbUluZGV4ID0gaTtcbiAgICAgIGhhbmRsZVNlbGVjdChpdGVtKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjbG9zZUxpc3QoKSB7XG4gICAgZGlzcGF0Y2goJ2Nsb3NlTGlzdCcpO1xuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gdXBkYXRlSG92ZXJJdGVtKGluY3JlbWVudCkge1xuICAgIGlmIChpc1ZpcnR1YWxMaXN0KSByZXR1cm47XG5cbiAgICBsZXQgaXNOb25TZWxlY3RhYmxlSXRlbSA9IHRydWU7XG5cbiAgICB3aGlsZSAoaXNOb25TZWxlY3RhYmxlSXRlbSkge1xuICAgICAgaWYgKGluY3JlbWVudCA+IDAgJiYgaG92ZXJJdGVtSW5kZXggPT09IChpdGVtcy5sZW5ndGggLSAxKSkge1xuICAgICAgICBob3Zlckl0ZW1JbmRleCA9IDA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpbmNyZW1lbnQgPCAwICYmIGhvdmVySXRlbUluZGV4ID09PSAwKSB7XG4gICAgICAgIGhvdmVySXRlbUluZGV4ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBob3Zlckl0ZW1JbmRleCA9IGhvdmVySXRlbUluZGV4ICsgaW5jcmVtZW50O1xuICAgICAgfVxuXG4gICAgICBpc05vblNlbGVjdGFibGVJdGVtID0gaXRlbXNbaG92ZXJJdGVtSW5kZXhdLmlzR3JvdXBIZWFkZXIgJiYgIWl0ZW1zW2hvdmVySXRlbUluZGV4XS5pc1NlbGVjdGFibGU7XG4gICAgfVxuXG4gICAgYXdhaXQgdGljaygpO1xuXG4gICAgc2Nyb2xsVG9BY3RpdmVJdGVtKCdob3ZlcicpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgc3dpdGNoIChlLmtleSkge1xuICAgICAgY2FzZSAnQXJyb3dEb3duJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpdGVtcy5sZW5ndGggJiYgdXBkYXRlSG92ZXJJdGVtKDEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0Fycm93VXAnOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGl0ZW1zLmxlbmd0aCAmJiB1cGRhdGVIb3Zlckl0ZW0oLTEpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ0VudGVyJzpcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBpZiAoaXRlbXMubGVuZ3RoID09PSAwKSBicmVhaztcbiAgICAgICAgY29uc3QgaG92ZXJJdGVtID0gaXRlbXNbaG92ZXJJdGVtSW5kZXhdO1xuICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZSAmJiAhaXNNdWx0aSAmJiBzZWxlY3RlZFZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBob3Zlckl0ZW1bb3B0aW9uSWRlbnRpZmllcl0pIHtcbiAgICAgICAgICBjbG9zZUxpc3QoKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChob3Zlckl0ZW0uaXNDcmVhdG9yKSB7XG4gICAgICAgICAgZGlzcGF0Y2goJ2l0ZW1DcmVhdGVkJywgZmlsdGVyVGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaG92ZXJJdGVtSW5kZXg7XG4gICAgICAgICAgaGFuZGxlU2VsZWN0KGl0ZW1zW2hvdmVySXRlbUluZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdUYWInOlxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmIChpdGVtcy5sZW5ndGggPT09IDApIGJyZWFrO1xuICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZSAmJiBzZWxlY3RlZFZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBpdGVtc1tob3Zlckl0ZW1JbmRleF1bb3B0aW9uSWRlbnRpZmllcl0pIHJldHVybiBjbG9zZUxpc3QoKTtcbiAgICAgICAgYWN0aXZlSXRlbUluZGV4ID0gaG92ZXJJdGVtSW5kZXg7XG4gICAgICAgIGhhbmRsZVNlbGVjdChpdGVtc1tob3Zlckl0ZW1JbmRleF0pO1xuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzY3JvbGxUb0FjdGl2ZUl0ZW0oY2xhc3NOYW1lKSB7XG4gICAgaWYgKGlzVmlydHVhbExpc3QgfHwgIWNvbnRhaW5lcikgcmV0dXJuO1xuXG4gICAgbGV0IG9mZnNldEJvdW5kaW5nO1xuICAgIGNvbnN0IGZvY3VzZWRFbGVtQm91bmRpbmcgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcihgLmxpc3RJdGVtIC4ke2NsYXNzTmFtZX1gKTtcblxuICAgIGlmIChmb2N1c2VkRWxlbUJvdW5kaW5nKSB7XG4gICAgICBvZmZzZXRCb3VuZGluZyA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gLSBmb2N1c2VkRWxlbUJvdW5kaW5nLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbTtcbiAgICB9XG5cbiAgICBjb250YWluZXIuc2Nyb2xsVG9wIC09IG9mZnNldEJvdW5kaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gaXNJdGVtQWN0aXZlKGl0ZW0sIHNlbGVjdGVkVmFsdWUsIG9wdGlvbklkZW50aWZpZXIpIHtcbiAgICByZXR1cm4gc2VsZWN0ZWRWYWx1ZSAmJiAoc2VsZWN0ZWRWYWx1ZVtvcHRpb25JZGVudGlmaWVyXSA9PT0gaXRlbVtvcHRpb25JZGVudGlmaWVyXSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gaXNJdGVtRmlyc3QoaXRlbUluZGV4KSB7XG4gICAgcmV0dXJuIGl0ZW1JbmRleCA9PT0gMDtcbiAgfTtcblxuICBmdW5jdGlvbiBpc0l0ZW1Ib3Zlcihob3Zlckl0ZW1JbmRleCwgaXRlbSwgaXRlbUluZGV4LCBpdGVtcykge1xuICAgIHJldHVybiBob3Zlckl0ZW1JbmRleCA9PT0gaXRlbUluZGV4IHx8IGl0ZW1zLmxlbmd0aCA9PT0gMTtcbiAgfVxuXG48L3NjcmlwdD5cblxuPHN2ZWx0ZTp3aW5kb3cgb246a2V5ZG93bj1cIntoYW5kbGVLZXlEb3dufVwiIC8+XG5cbnsjaWYgaXNWaXJ0dWFsTGlzdH1cbjxkaXYgY2xhc3M9XCJsaXN0Q29udGFpbmVyIHZpcnR1YWxMaXN0XCIgYmluZDp0aGlzPXtjb250YWluZXJ9PlxuXG4gIDxWaXJ0dWFsTGlzdCB7aXRlbXN9IHtpdGVtSGVpZ2h0fSBsZXQ6aXRlbSBsZXQ6aT5cbiAgXG4gICAgPGRpdiBvbjptb3VzZW92ZXI9XCJ7KCkgPT4gaGFuZGxlSG92ZXIoaSl9XCIgb246Y2xpY2s9XCJ7ZXZlbnQgPT4gaGFuZGxlQ2xpY2soe2l0ZW0sIGksIGV2ZW50fSl9XCJcbiAgICAgICAgY2xhc3M9XCJsaXN0SXRlbVwiPlxuICAgICAgICAgIDxzdmVsdGU6Y29tcG9uZW50IFxuICAgICAgICAgICAgdGhpcz1cIntJdGVtfVwiXG4gICAgICAgICAgICB7aXRlbX1cbiAgICAgICAgICAgIHtmaWx0ZXJUZXh0fVxuICAgICAgICAgICAge2dldE9wdGlvbkxhYmVsfVxuICAgICAgICAgICAgaXNGaXJzdD1cIntpc0l0ZW1GaXJzdChpKX1cIlxuICAgICAgICAgICAgaXNBY3RpdmU9XCJ7aXNJdGVtQWN0aXZlKGl0ZW0sIHNlbGVjdGVkVmFsdWUsIG9wdGlvbklkZW50aWZpZXIpfVwiXG4gICAgICAgICAgICBpc0hvdmVyPVwie2lzSXRlbUhvdmVyKGhvdmVySXRlbUluZGV4LCBpdGVtLCBpLCBpdGVtcyl9XCJcbiAgICAgICAgICAvPlxuICAgIDwvZGl2PlxuICBcbjwvVmlydHVhbExpc3Q+XG48L2Rpdj5cbnsvaWZ9XG5cbnsjaWYgIWlzVmlydHVhbExpc3R9XG48ZGl2IGNsYXNzPVwibGlzdENvbnRhaW5lclwiIGJpbmQ6dGhpcz17Y29udGFpbmVyfT5cbiAgeyNlYWNoIGl0ZW1zIGFzIGl0ZW0sIGl9XG4gICAgeyNpZiBpdGVtLmlzR3JvdXBIZWFkZXIgJiYgIWl0ZW0uaXNTZWxlY3RhYmxlfVxuICAgICAgPGRpdiBjbGFzcz1cImxpc3RHcm91cFRpdGxlXCI+e2dldEdyb3VwSGVhZGVyTGFiZWwoaXRlbSl9PC9kaXY+XG4gICAgeyA6ZWxzZSB9XG4gICAgPGRpdiBcbiAgICAgIG9uOm1vdXNlb3Zlcj1cInsoKSA9PiBoYW5kbGVIb3ZlcihpKX1cIiBcbiAgICAgIG9uOmNsaWNrPVwie2V2ZW50ID0+IGhhbmRsZUNsaWNrKHtpdGVtLCBpLCBldmVudH0pfVwiXG4gICAgICBjbGFzcz1cImxpc3RJdGVtXCJcbiAgICA+XG4gICAgICA8c3ZlbHRlOmNvbXBvbmVudCBcbiAgICAgICAgdGhpcz1cIntJdGVtfVwiXG4gICAgICAgIHtpdGVtfVxuICAgICAgICB7ZmlsdGVyVGV4dH1cbiAgICAgICAge2dldE9wdGlvbkxhYmVsfVxuICAgICAgICBpc0ZpcnN0PVwie2lzSXRlbUZpcnN0KGkpfVwiXG4gICAgICAgIGlzQWN0aXZlPVwie2lzSXRlbUFjdGl2ZShpdGVtLCBzZWxlY3RlZFZhbHVlLCBvcHRpb25JZGVudGlmaWVyKX1cIlxuICAgICAgICBpc0hvdmVyPVwie2lzSXRlbUhvdmVyKGhvdmVySXRlbUluZGV4LCBpdGVtLCBpLCBpdGVtcyl9XCJcbiAgICAgIC8+XG4gICAgPC9kaXY+XG4gICAgey9pZn1cbiAgezplbHNlfVxuICAgIHsjaWYgIWhpZGVFbXB0eVN0YXRlfVxuICAgICAgPGRpdiBjbGFzcz1cImVtcHR5XCI+e25vT3B0aW9uc01lc3NhZ2V9PC9kaXY+XG4gICAgey9pZn1cbiAgey9lYWNofVxuPC9kaXY+XG57L2lmfVxuXG48c3R5bGU+XG4gIC5saXN0Q29udGFpbmVyIHtcbiAgICBib3gtc2hhZG93OiB2YXIoLS1saXN0U2hhZG93LCAwIDJweCAzcHggMCByZ2JhKDQ0LCA2MiwgODAsIDAuMjQpKTtcbiAgICBib3JkZXItcmFkaXVzOiB2YXIoLS1saXN0Qm9yZGVyUmFkaXVzLCA0cHgpO1xuICAgIG1heC1oZWlnaHQ6IHZhcigtLWxpc3RNYXhIZWlnaHQsIDI1MHB4KTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICAgIGJhY2tncm91bmQ6IHZhcigtLWxpc3RCYWNrZ3JvdW5kLCAjZmZmKTtcbiAgfVxuXG4gIC52aXJ0dWFsTGlzdCB7XG4gICAgaGVpZ2h0OiB2YXIoLS12aXJ0dWFsTGlzdEhlaWdodCwgMjAwcHgpO1xuICB9XG5cbiAgLmxpc3RHcm91cFRpdGxlIHtcbiAgICBjb2xvcjogdmFyKC0tZ3JvdXBUaXRsZUNvbG9yLCAjOGY4ZjhmKTtcbiAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgZm9udC1zaXplOiB2YXIoLS1ncm91cFRpdGxlRm9udFNpemUsIDEycHgpO1xuICAgIGZvbnQtd2VpZ2h0OiB2YXIoLS1ncm91cFRpdGxlRm9udFdlaWdodCwgNjAwKTtcbiAgICBoZWlnaHQ6IHZhcigtLWhlaWdodCwgNDJweCk7XG4gICAgbGluZS1oZWlnaHQ6IHZhcigtLWhlaWdodCwgNDJweCk7XG4gICAgcGFkZGluZzogdmFyKC0tZ3JvdXBUaXRsZVBhZGRpbmcsIDAgMjBweCk7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgdGV4dC10cmFuc2Zvcm06IHZhcigtLWdyb3VwVGl0bGVUZXh0VHJhbnNmb3JtLCB1cHBlcmNhc2UpO1xuICB9XG5cbiAgLmVtcHR5IHtcbiAgICB0ZXh0LWFsaWduOiB2YXIoLS1saXN0RW1wdHlUZXh0QWxpZ24sIGNlbnRlcik7XG4gICAgcGFkZGluZzogdmFyKC0tbGlzdEVtcHR5UGFkZGluZywgMjBweCAwKTtcbiAgICBjb2xvcjogdmFyKC0tbGlzdEVtcHR5Q29sb3IsICM3ODg0OEYpO1xuICB9XG48L3N0eWxlPlxuIiwiPHNjcmlwdD5cbiAgZXhwb3J0IGxldCBnZXRTZWxlY3Rpb25MYWJlbCA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBpdGVtID0gdW5kZWZpbmVkO1xuPC9zY3JpcHQ+XG5cbjxzdHlsZT5cbiAgLnNlbGVjdGlvbiB7XG4gICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cbjwvc3R5bGU+XG5cbjxkaXYgY2xhc3M9XCJzZWxlY3Rpb25cIj5cbiAge0BodG1sIGdldFNlbGVjdGlvbkxhYmVsKGl0ZW0pfSBcbjwvZGl2PlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgY3JlYXRlRXZlbnREaXNwYXRjaGVyIH0gZnJvbSAnc3ZlbHRlJztcblxuICBjb25zdCBkaXNwYXRjaCA9IGNyZWF0ZUV2ZW50RGlzcGF0Y2hlcigpO1xuXG4gIGV4cG9ydCBsZXQgc2VsZWN0ZWRWYWx1ZSA9IFtdO1xuICBleHBvcnQgbGV0IGFjdGl2ZVNlbGVjdGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCBsZXQgaXNEaXNhYmxlZCA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGdldFNlbGVjdGlvbkxhYmVsID0gdW5kZWZpbmVkO1xuXG4gIGZ1bmN0aW9uIGhhbmRsZUNsZWFyKGksIGV2ZW50KSB7XG4gICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgZGlzcGF0Y2goJ211bHRpSXRlbUNsZWFyJywge2l9KTtcbiAgfVxuPC9zY3JpcHQ+XG5cbnsjZWFjaCBzZWxlY3RlZFZhbHVlIGFzIHZhbHVlLCBpfVxuPGRpdiBjbGFzcz1cIm11bHRpU2VsZWN0SXRlbSB7YWN0aXZlU2VsZWN0ZWRWYWx1ZSA9PT0gaSA/ICdhY3RpdmUnIDogJyd9IHtpc0Rpc2FibGVkID8gJ2Rpc2FibGVkJyA6ICcnfVwiPlxuICA8ZGl2IGNsYXNzPVwibXVsdGlTZWxlY3RJdGVtX2xhYmVsXCI+XG4gICAge0BodG1sIGdldFNlbGVjdGlvbkxhYmVsKHZhbHVlKX1cbiAgPC9kaXY+XG4gIHsjaWYgIWlzRGlzYWJsZWR9XG4gIDxkaXYgY2xhc3M9XCJtdWx0aVNlbGVjdEl0ZW1fY2xlYXJcIiBvbjpjbGljaz1cIntldmVudCA9PiBoYW5kbGVDbGVhcihpLCBldmVudCl9XCI+XG4gICAgPHN2ZyB3aWR0aD1cIjEwMCVcIiBoZWlnaHQ9XCIxMDAlXCIgdmlld0JveD1cIi0yIC0yIDUwIDUwXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+XG4gICAgICA8cGF0aFxuICAgICAgICBkPVwiTTM0LjkyMywzNy4yNTFMMjQsMjYuMzI4TDEzLjA3NywzNy4yNTFMOS40MzYsMzMuNjFsMTAuOTIzLTEwLjkyM0w5LjQzNiwxMS43NjVsMy42NDEtMy42NDFMMjQsMTkuMDQ3TDM0LjkyMyw4LjEyNCBsMy42NDEsMy42NDFMMjcuNjQxLDIyLjY4OEwzOC41NjQsMzMuNjFMMzQuOTIzLDM3LjI1MXpcIj48L3BhdGg+XG4gICAgPC9zdmc+XG4gIDwvZGl2PlxuICB7L2lmfVxuPC9kaXY+XG57L2VhY2h9XG5cblxuXG48c3R5bGU+XG4gIC5tdWx0aVNlbGVjdEl0ZW0ge1xuICAgIGJhY2tncm91bmQ6IHZhcigtLW11bHRpSXRlbUJHLCAjRUJFREVGKTtcbiAgICBtYXJnaW46IHZhcigtLW11bHRpSXRlbU1hcmdpbiwgNXB4IDVweCAwIDApO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW11bHRpSXRlbUJvcmRlclJhZGl1cywgMTZweCk7XG4gICAgaGVpZ2h0OiB2YXIoLS1tdWx0aUl0ZW1IZWlnaHQsIDMycHgpO1xuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1tdWx0aUl0ZW1IZWlnaHQsIDMycHgpO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIHBhZGRpbmc6IHZhcigtLW11bHRpSXRlbVBhZGRpbmcsIDAgMTBweCAwIDE1cHgpO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0SXRlbV9sYWJlbCB7XG4gICAgbWFyZ2luOiB2YXIoLS1tdWx0aUxhYmVsTWFyZ2luLCAwIDVweCAwIDApO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0SXRlbTpob3ZlcixcbiAgLm11bHRpU2VsZWN0SXRlbS5hY3RpdmUge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHZhcigtLW11bHRpSXRlbUFjdGl2ZUJHLCAjMDA2RkZGKTtcbiAgICBjb2xvcjogdmFyKC0tbXVsdGlJdGVtQWN0aXZlQ29sb3IsICNmZmYpO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0SXRlbS5kaXNhYmxlZDpob3ZlciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbXVsdGlJdGVtRGlzYWJsZWRIb3ZlckJnLCAjRUJFREVGKTtcbiAgICBjb2xvcjogdmFyKC0tbXVsdGlJdGVtRGlzYWJsZWRIb3ZlckNvbG9yLCAjQzFDNkNDKTtcbiAgfVxuXG4gIC5tdWx0aVNlbGVjdEl0ZW1fY2xlYXIge1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLW11bHRpQ2xlYXJSYWRpdXMsIDUwJSk7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbXVsdGlDbGVhckJHLCAjNTI2MTZGKTtcbiAgICB3aWR0aDogdmFyKC0tbXVsdGlDbGVhcldpZHRoLCAxNnB4KTtcbiAgICBoZWlnaHQ6IHZhcigtLW11bHRpQ2xlYXJIZWlnaHQsIDE2cHgpO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICB0b3A6IHZhcigtLW11bHRpQ2xlYXJUb3AsIDhweCk7XG4gICAgdGV4dC1hbGlnbjogdmFyKC0tbXVsdGlDbGVhclRleHRBbGlnbiwgY2VudGVyKTtcbiAgICBwYWRkaW5nOiB2YXIoLS1tdWx0aUNsZWFyUGFkZGluZywgMXB4KTtcbiAgfVxuXG4gIC5tdWx0aVNlbGVjdEl0ZW1fY2xlYXI6aG92ZXIsXG4gIC5hY3RpdmUgLm11bHRpU2VsZWN0SXRlbV9jbGVhciB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tbXVsdGlDbGVhckhvdmVyQkcsICNmZmYpO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0SXRlbV9jbGVhcjpob3ZlciBzdmcsXG4gIC5hY3RpdmUgLm11bHRpU2VsZWN0SXRlbV9jbGVhciBzdmcge1xuICAgIGZpbGw6IHZhcigtLW11bHRpQ2xlYXJIb3ZlckZpbGwsICMwMDZGRkYpO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0SXRlbV9jbGVhciBzdmcge1xuICAgIGZpbGw6IHZhcigtLW11bHRpQ2xlYXJGaWxsLCAjRUJFREVGKTtcbiAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wO1xuICB9XG48L3N0eWxlPlxuIiwiPHNjcmlwdD5cbiAgaW1wb3J0IHtcbiAgICBiZWZvcmVVcGRhdGUsXG4gICAgY3JlYXRlRXZlbnREaXNwYXRjaGVyLFxuICAgIG9uRGVzdHJveSxcbiAgICBvbk1vdW50LFxuICAgIHRpY2tcbiAgfSBmcm9tIFwic3ZlbHRlXCI7XG4gIGltcG9ydCBMaXN0IGZyb20gXCIuL0xpc3Quc3ZlbHRlXCI7XG4gIGltcG9ydCBJdGVtQ29tcG9uZW50IGZyb20gXCIuL0l0ZW0uc3ZlbHRlXCI7XG4gIGltcG9ydCBTZWxlY3Rpb25Db21wb25lbnQgZnJvbSBcIi4vU2VsZWN0aW9uLnN2ZWx0ZVwiO1xuICBpbXBvcnQgTXVsdGlTZWxlY3Rpb25Db21wb25lbnQgZnJvbSBcIi4vTXVsdGlTZWxlY3Rpb24uc3ZlbHRlXCI7XG4gIGltcG9ydCBpc091dE9mVmlld3BvcnQgZnJvbSBcIi4vdXRpbHMvaXNPdXRPZlZpZXdwb3J0XCI7XG4gIGltcG9ydCBkZWJvdW5jZSBmcm9tIFwiLi91dGlscy9kZWJvdW5jZVwiO1xuXG4gIGNvbnN0IGRpc3BhdGNoID0gY3JlYXRlRXZlbnREaXNwYXRjaGVyKCk7XG4gIGV4cG9ydCBsZXQgY29udGFpbmVyID0gdW5kZWZpbmVkO1xuICBleHBvcnQgbGV0IGlucHV0ID0gdW5kZWZpbmVkO1xuICBleHBvcnQgbGV0IEl0ZW0gPSBJdGVtQ29tcG9uZW50O1xuICBleHBvcnQgbGV0IFNlbGVjdGlvbiA9IFNlbGVjdGlvbkNvbXBvbmVudDtcbiAgZXhwb3J0IGxldCBNdWx0aVNlbGVjdGlvbiA9IE11bHRpU2VsZWN0aW9uQ29tcG9uZW50O1xuICBleHBvcnQgbGV0IGlzTXVsdGkgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBpc0Rpc2FibGVkID0gZmFsc2U7XG4gIGV4cG9ydCBsZXQgaXNDcmVhdGFibGUgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBpc0ZvY3VzZWQgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBzZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuICBleHBvcnQgbGV0IGZpbHRlclRleHQgPSBcIlwiO1xuICBleHBvcnQgbGV0IHBsYWNlaG9sZGVyID0gXCJTZWxlY3QuLi5cIjtcbiAgZXhwb3J0IGxldCBpdGVtcyA9IFtdO1xuICBleHBvcnQgbGV0IGl0ZW1GaWx0ZXIgPSAobGFiZWwsIGZpbHRlclRleHQsIG9wdGlvbikgPT5cbiAgICBsYWJlbC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQudG9Mb3dlckNhc2UoKSk7XG4gIGV4cG9ydCBsZXQgZ3JvdXBCeSA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBncm91cEZpbHRlciA9IGdyb3VwcyA9PiBncm91cHM7XG4gIGV4cG9ydCBsZXQgaXNHcm91cEhlYWRlclNlbGVjdGFibGUgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBnZXRHcm91cEhlYWRlckxhYmVsID0gb3B0aW9uID0+IHtcbiAgICByZXR1cm4gb3B0aW9uLmxhYmVsO1xuICB9O1xuICBleHBvcnQgbGV0IGdldE9wdGlvbkxhYmVsID0gKG9wdGlvbiwgZmlsdGVyVGV4dCkgPT4ge1xuICAgIHJldHVybiBvcHRpb24uaXNDcmVhdG9yID8gYENyZWF0ZSBcXFwiJHtmaWx0ZXJUZXh0fVxcXCJgIDogb3B0aW9uLmxhYmVsO1xuICB9O1xuICBleHBvcnQgbGV0IG9wdGlvbklkZW50aWZpZXIgPSBcInZhbHVlXCI7XG4gIGV4cG9ydCBsZXQgbG9hZE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIGV4cG9ydCBsZXQgaGFzRXJyb3IgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBjb250YWluZXJTdHlsZXMgPSBcIlwiO1xuICBleHBvcnQgbGV0IGdldFNlbGVjdGlvbkxhYmVsID0gb3B0aW9uID0+IHtcbiAgICBpZiAob3B0aW9uKSByZXR1cm4gb3B0aW9uLmxhYmVsO1xuICB9O1xuXG4gIGV4cG9ydCBsZXQgY3JlYXRlR3JvdXBIZWFkZXJJdGVtID0gZ3JvdXBWYWx1ZSA9PiB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbHVlOiBncm91cFZhbHVlLFxuICAgICAgbGFiZWw6IGdyb3VwVmFsdWVcbiAgICB9O1xuICB9O1xuXG4gIGV4cG9ydCBsZXQgY3JlYXRlSXRlbSA9IGZpbHRlclRleHQgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogZmlsdGVyVGV4dCxcbiAgICAgIGxhYmVsOiBmaWx0ZXJUZXh0XG4gICAgfTtcbiAgfTtcblxuICBleHBvcnQgbGV0IGlzU2VhcmNoYWJsZSA9IHRydWU7XG4gIGV4cG9ydCBsZXQgaW5wdXRTdHlsZXMgPSBcIlwiO1xuICBleHBvcnQgbGV0IGlzQ2xlYXJhYmxlID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBpc1dhaXRpbmcgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBsaXN0UGxhY2VtZW50ID0gXCJhdXRvXCI7XG4gIGV4cG9ydCBsZXQgbGlzdE9wZW4gPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBsaXN0ID0gdW5kZWZpbmVkO1xuICBleHBvcnQgbGV0IGlzVmlydHVhbExpc3QgPSBmYWxzZTtcbiAgZXhwb3J0IGxldCBsb2FkT3B0aW9uc0ludGVydmFsID0gMzAwO1xuICBleHBvcnQgbGV0IG5vT3B0aW9uc01lc3NhZ2UgPSBcIk5vIG9wdGlvbnNcIjtcbiAgZXhwb3J0IGxldCBoaWRlRW1wdHlTdGF0ZSA9IGZhbHNlO1xuICBleHBvcnQgbGV0IGZpbHRlcmVkSXRlbXMgPSBbXTtcbiAgZXhwb3J0IGxldCBpbnB1dEF0dHJpYnV0ZXMgPSB7fTtcbiAgZXhwb3J0IGxldCBsaXN0QXV0b1dpZHRoID0gdHJ1ZTtcbiAgZXhwb3J0IGxldCBpdGVtSGVpZ2h0ID0gNDA7XG4gIGV4cG9ydCBsZXQgSWNvbiA9IHVuZGVmaW5lZDtcbiAgZXhwb3J0IGxldCBzaG93Q2hldnJvbiA9IGZhbHNlO1xuXG4gIGxldCB0YXJnZXQ7XG4gIGxldCBhY3RpdmVTZWxlY3RlZFZhbHVlO1xuICBsZXQgX2l0ZW1zID0gW107XG4gIGxldCBvcmlnaW5hbEl0ZW1zQ2xvbmU7XG4gIGxldCBjb250YWluZXJDbGFzc2VzID0gXCJcIjtcbiAgbGV0IHByZXZfc2VsZWN0ZWRWYWx1ZTtcbiAgbGV0IHByZXZfbGlzdE9wZW47XG4gIGxldCBwcmV2X2ZpbHRlclRleHQ7XG4gIGxldCBwcmV2X2lzRm9jdXNlZDtcbiAgbGV0IHByZXZfZmlsdGVyZWRJdGVtcztcblxuICBhc3luYyBmdW5jdGlvbiByZXNldEZpbHRlcigpIHtcbiAgICBhd2FpdCB0aWNrKCk7XG4gICAgZmlsdGVyVGV4dCA9IFwiXCI7XG4gIH1cblxuICBjb25zdCBnZXRJdGVtcyA9IGRlYm91bmNlKGFzeW5jICgpID0+IHtcbiAgICBpc1dhaXRpbmcgPSB0cnVlO1xuXG4gICAgaXRlbXMgPSBhd2FpdCBsb2FkT3B0aW9ucyhmaWx0ZXJUZXh0KTtcblxuICAgIGlzV2FpdGluZyA9IGZhbHNlO1xuICAgIGlzRm9jdXNlZCA9IHRydWU7XG4gICAgbGlzdE9wZW4gPSB0cnVlO1xuICB9LCBsb2FkT3B0aW9uc0ludGVydmFsKTtcblxuICAkOiBkaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG5cbiAgJDoge1xuICAgIGNvbnRhaW5lckNsYXNzZXMgPSBgc2VsZWN0Q29udGFpbmVyYDtcbiAgICBjb250YWluZXJDbGFzc2VzICs9IGlzTXVsdGkgPyBcIiBtdWx0aVNlbGVjdFwiIDogXCJcIjtcbiAgICBjb250YWluZXJDbGFzc2VzICs9IGlzRGlzYWJsZWQgPyBcIiBkaXNhYmxlZFwiIDogXCJcIjtcbiAgICBjb250YWluZXJDbGFzc2VzICs9IGlzRm9jdXNlZCA/IFwiIGZvY3VzZWRcIiA6IFwiXCI7XG4gIH1cblxuICAkOiB7XG4gICAgaWYgKHR5cGVvZiBzZWxlY3RlZFZhbHVlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBzZWxlY3RlZFZhbHVlID0ge1xuICAgICAgICBbb3B0aW9uSWRlbnRpZmllcl06IHNlbGVjdGVkVmFsdWUsXG4gICAgICAgIGxhYmVsOiBzZWxlY3RlZFZhbHVlXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gICQ6IHNob3dTZWxlY3RlZEl0ZW0gPSBzZWxlY3RlZFZhbHVlICYmIGZpbHRlclRleHQubGVuZ3RoID09PSAwO1xuXG4gICQ6IHBsYWNlaG9sZGVyVGV4dCA9IHNlbGVjdGVkVmFsdWUgPyBcIlwiIDogcGxhY2Vob2xkZXI7XG5cbiAgbGV0IF9pbnB1dEF0dHJpYnV0ZXMgPSB7fTtcbiAgJDoge1xuICAgIF9pbnB1dEF0dHJpYnV0ZXMgPSBPYmplY3QuYXNzaWduKGlucHV0QXR0cmlidXRlcywge1xuICAgICAgYXV0b2NvbXBsZXRlOiBcIm9mZlwiLFxuICAgICAgYXV0b2NvcnJlY3Q6IFwib2ZmXCIsXG4gICAgICBzcGVsbGNoZWNrOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgaWYgKCFpc1NlYXJjaGFibGUpIHtcbiAgICAgIF9pbnB1dEF0dHJpYnV0ZXMucmVhZG9ubHkgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gICQ6IHtcbiAgICBsZXQgX2ZpbHRlcmVkSXRlbXM7XG4gICAgbGV0IF9pdGVtcyA9IGl0ZW1zO1xuXG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDAgJiYgdHlwZW9mIGl0ZW1zWzBdICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICBfaXRlbXMgPSBpdGVtcy5tYXAoKGl0ZW0sIGluZGV4KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICAgICAgbGFiZWw6IGl0ZW1cbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChsb2FkT3B0aW9ucyAmJiBmaWx0ZXJUZXh0Lmxlbmd0aCA9PT0gMCAmJiBvcmlnaW5hbEl0ZW1zQ2xvbmUpIHtcbiAgICAgIF9maWx0ZXJlZEl0ZW1zID0gSlNPTi5wYXJzZShvcmlnaW5hbEl0ZW1zQ2xvbmUpO1xuICAgICAgX2l0ZW1zID0gSlNPTi5wYXJzZShvcmlnaW5hbEl0ZW1zQ2xvbmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBfZmlsdGVyZWRJdGVtcyA9IGxvYWRPcHRpb25zXG4gICAgICAgID8gZmlsdGVyVGV4dC5sZW5ndGggPT09IDBcbiAgICAgICAgICA/IFtdXG4gICAgICAgICAgOiBfaXRlbXNcbiAgICAgICAgOiBfaXRlbXMuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICAgICAgbGV0IGtlZXBJdGVtID0gdHJ1ZTtcblxuICAgICAgICAgICAgaWYgKGlzTXVsdGkgJiYgc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgICBrZWVwSXRlbSA9ICFzZWxlY3RlZFZhbHVlLmZpbmQodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVtvcHRpb25JZGVudGlmaWVyXSA9PT0gaXRlbVtvcHRpb25JZGVudGlmaWVyXTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICgha2VlcEl0ZW0pIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJUZXh0Lmxlbmd0aCA8IDEpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1GaWx0ZXIoXG4gICAgICAgICAgICAgIGdldE9wdGlvbkxhYmVsKGl0ZW0sIGZpbHRlclRleHQpLFxuICAgICAgICAgICAgICBmaWx0ZXJUZXh0LFxuICAgICAgICAgICAgICBpdGVtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChncm91cEJ5KSB7XG4gICAgICBjb25zdCBncm91cFZhbHVlcyA9IFtdO1xuICAgICAgY29uc3QgZ3JvdXBzID0ge307XG5cbiAgICAgIF9maWx0ZXJlZEl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG4gICAgICAgIGNvbnN0IGdyb3VwVmFsdWUgPSBncm91cEJ5KGl0ZW0pO1xuXG4gICAgICAgIGlmICghZ3JvdXBWYWx1ZXMuaW5jbHVkZXMoZ3JvdXBWYWx1ZSkpIHtcbiAgICAgICAgICBncm91cFZhbHVlcy5wdXNoKGdyb3VwVmFsdWUpO1xuICAgICAgICAgIGdyb3Vwc1tncm91cFZhbHVlXSA9IFtdO1xuXG4gICAgICAgICAgaWYgKGdyb3VwVmFsdWUpIHtcbiAgICAgICAgICAgIGdyb3Vwc1tncm91cFZhbHVlXS5wdXNoKFxuICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGNyZWF0ZUdyb3VwSGVhZGVySXRlbShncm91cFZhbHVlLCBpdGVtKSwge1xuICAgICAgICAgICAgICAgIGlkOiBncm91cFZhbHVlLFxuICAgICAgICAgICAgICAgIGlzR3JvdXBIZWFkZXI6IHRydWUsXG4gICAgICAgICAgICAgICAgaXNTZWxlY3RhYmxlOiBpc0dyb3VwSGVhZGVyU2VsZWN0YWJsZVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBncm91cHNbZ3JvdXBWYWx1ZV0ucHVzaChcbiAgICAgICAgICBPYmplY3QuYXNzaWduKHsgaXNHcm91cEl0ZW06ICEhZ3JvdXBWYWx1ZSB9LCBpdGVtKVxuICAgICAgICApO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHNvcnRlZEdyb3VwZWRJdGVtcyA9IFtdO1xuXG4gICAgICBncm91cEZpbHRlcihncm91cFZhbHVlcykuZm9yRWFjaChncm91cFZhbHVlID0+IHtcbiAgICAgICAgc29ydGVkR3JvdXBlZEl0ZW1zLnB1c2goLi4uZ3JvdXBzW2dyb3VwVmFsdWVdKTtcbiAgICAgIH0pO1xuXG4gICAgICBmaWx0ZXJlZEl0ZW1zID0gc29ydGVkR3JvdXBlZEl0ZW1zO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaWx0ZXJlZEl0ZW1zID0gX2ZpbHRlcmVkSXRlbXM7XG4gICAgfVxuICB9XG5cbiAgYmVmb3JlVXBkYXRlKCgpID0+IHtcbiAgICBpZiAoaXNNdWx0aSAmJiBzZWxlY3RlZFZhbHVlICYmIHNlbGVjdGVkVmFsdWUubGVuZ3RoID4gMSkge1xuICAgICAgY2hlY2tTZWxlY3RlZFZhbHVlRm9yRHVwbGljYXRlcygpO1xuICAgIH1cblxuICAgIGlmICghaXNNdWx0aSAmJiBzZWxlY3RlZFZhbHVlICYmIHByZXZfc2VsZWN0ZWRWYWx1ZSAhPT0gc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgaWYgKFxuICAgICAgICAhcHJldl9zZWxlY3RlZFZhbHVlIHx8XG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHNlbGVjdGVkVmFsdWVbb3B0aW9uSWRlbnRpZmllcl0pICE9PVxuICAgICAgICAgIEpTT04uc3RyaW5naWZ5KHByZXZfc2VsZWN0ZWRWYWx1ZVtvcHRpb25JZGVudGlmaWVyXSlcbiAgICAgICkge1xuICAgICAgICBkaXNwYXRjaChcInNlbGVjdFwiLCBzZWxlY3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBpc011bHRpICYmXG4gICAgICBKU09OLnN0cmluZ2lmeShzZWxlY3RlZFZhbHVlKSAhPT0gSlNPTi5zdHJpbmdpZnkocHJldl9zZWxlY3RlZFZhbHVlKVxuICAgICkge1xuICAgICAgaWYgKGNoZWNrU2VsZWN0ZWRWYWx1ZUZvckR1cGxpY2F0ZXMoKSkge1xuICAgICAgICBkaXNwYXRjaChcInNlbGVjdFwiLCBzZWxlY3RlZFZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29udGFpbmVyICYmIGxpc3RPcGVuICE9PSBwcmV2X2xpc3RPcGVuKSB7XG4gICAgICBpZiAobGlzdE9wZW4pIHtcbiAgICAgICAgbG9hZExpc3QoKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlbW92ZUxpc3QoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmlsdGVyVGV4dCAhPT0gcHJldl9maWx0ZXJUZXh0KSB7XG4gICAgICBpZiAoZmlsdGVyVGV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlzRm9jdXNlZCA9IHRydWU7XG4gICAgICAgIGxpc3RPcGVuID0gdHJ1ZTtcblxuICAgICAgICBpZiAobG9hZE9wdGlvbnMpIHtcbiAgICAgICAgICBnZXRJdGVtcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvYWRMaXN0KCk7XG4gICAgICAgICAgbGlzdE9wZW4gPSB0cnVlO1xuXG4gICAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgIGFjdGl2ZVNlbGVjdGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRMaXN0KFtdKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGxpc3QpIHtcbiAgICAgICAgbGlzdC4kc2V0KHtcbiAgICAgICAgICBmaWx0ZXJUZXh0XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChpc0ZvY3VzZWQgIT09IHByZXZfaXNGb2N1c2VkKSB7XG4gICAgICBpZiAoaXNGb2N1c2VkIHx8IGxpc3RPcGVuKSB7XG4gICAgICAgIGhhbmRsZUZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXNldEZpbHRlcigpO1xuICAgICAgICBpZiAoaW5wdXQpIGlucHV0LmJsdXIoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAocHJldl9maWx0ZXJlZEl0ZW1zICE9PSBmaWx0ZXJlZEl0ZW1zKSB7XG4gICAgICBsZXQgX2ZpbHRlcmVkSXRlbXMgPSBbLi4uZmlsdGVyZWRJdGVtc107XG5cbiAgICAgIGlmIChpc0NyZWF0YWJsZSAmJiBmaWx0ZXJUZXh0KSB7XG4gICAgICAgIGNvbnN0IGl0ZW1Ub0NyZWF0ZSA9IGNyZWF0ZUl0ZW0oZmlsdGVyVGV4dCk7XG4gICAgICAgIGl0ZW1Ub0NyZWF0ZS5pc0NyZWF0b3IgPSB0cnVlO1xuXG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSXRlbVdpdGhGaWx0ZXJWYWx1ZSA9IF9maWx0ZXJlZEl0ZW1zLmZpbmQoaXRlbSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGl0ZW1bb3B0aW9uSWRlbnRpZmllcl0gPT09IGl0ZW1Ub0NyZWF0ZVtvcHRpb25JZGVudGlmaWVyXTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgbGV0IGV4aXN0aW5nU2VsZWN0aW9uV2l0aEZpbHRlclZhbHVlO1xuXG4gICAgICAgIGlmIChzZWxlY3RlZFZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgICAgIGV4aXN0aW5nU2VsZWN0aW9uV2l0aEZpbHRlclZhbHVlID0gc2VsZWN0ZWRWYWx1ZS5maW5kKHNlbGVjdGlvbiA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uW29wdGlvbklkZW50aWZpZXJdID09PSBpdGVtVG9DcmVhdGVbb3B0aW9uSWRlbnRpZmllcl1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICBzZWxlY3RlZFZhbHVlW29wdGlvbklkZW50aWZpZXJdID09PSBpdGVtVG9DcmVhdGVbb3B0aW9uSWRlbnRpZmllcl1cbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGV4aXN0aW5nU2VsZWN0aW9uV2l0aEZpbHRlclZhbHVlID0gc2VsZWN0ZWRWYWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWV4aXN0aW5nSXRlbVdpdGhGaWx0ZXJWYWx1ZSAmJiAhZXhpc3RpbmdTZWxlY3Rpb25XaXRoRmlsdGVyVmFsdWUpIHtcbiAgICAgICAgICBfZmlsdGVyZWRJdGVtcyA9IFsuLi5fZmlsdGVyZWRJdGVtcywgaXRlbVRvQ3JlYXRlXTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzZXRMaXN0KF9maWx0ZXJlZEl0ZW1zKTtcbiAgICB9XG5cbiAgICBwcmV2X3NlbGVjdGVkVmFsdWUgPSBzZWxlY3RlZFZhbHVlO1xuICAgIHByZXZfbGlzdE9wZW4gPSBsaXN0T3BlbjtcbiAgICBwcmV2X2ZpbHRlclRleHQgPSBmaWx0ZXJUZXh0O1xuICAgIHByZXZfaXNGb2N1c2VkID0gaXNGb2N1c2VkO1xuICAgIHByZXZfZmlsdGVyZWRJdGVtcyA9IGZpbHRlcmVkSXRlbXM7XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNoZWNrU2VsZWN0ZWRWYWx1ZUZvckR1cGxpY2F0ZXMoKSB7XG4gICAgbGV0IG5vRHVwbGljYXRlcyA9IHRydWU7XG4gICAgaWYgKHNlbGVjdGVkVmFsdWUpIHtcbiAgICAgIGNvbnN0IGlkcyA9IFtdO1xuICAgICAgY29uc3QgdW5pcXVlVmFsdWVzID0gW107XG5cbiAgICAgIHNlbGVjdGVkVmFsdWUuZm9yRWFjaCh2YWwgPT4ge1xuICAgICAgICBpZiAoIWlkcy5pbmNsdWRlcyh2YWxbb3B0aW9uSWRlbnRpZmllcl0pKSB7XG4gICAgICAgICAgaWRzLnB1c2godmFsW29wdGlvbklkZW50aWZpZXJdKTtcbiAgICAgICAgICB1bmlxdWVWYWx1ZXMucHVzaCh2YWwpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vRHVwbGljYXRlcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHVuaXF1ZVZhbHVlcztcbiAgICB9XG4gICAgcmV0dXJuIG5vRHVwbGljYXRlcztcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHNldExpc3QoaXRlbXMpIHtcbiAgICBhd2FpdCB0aWNrKCk7XG4gICAgaWYgKGxpc3QpIHJldHVybiBsaXN0LiRzZXQoeyBpdGVtcyB9KTtcbiAgICBpZiAobG9hZE9wdGlvbnMgJiYgaXRlbXMubGVuZ3RoID4gMCkgbG9hZExpc3QoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZU11bHRpSXRlbUNsZWFyKGV2ZW50KSB7XG4gICAgY29uc3QgeyBkZXRhaWwgfSA9IGV2ZW50O1xuICAgIGNvbnN0IGl0ZW1Ub1JlbW92ZSA9XG4gICAgICBzZWxlY3RlZFZhbHVlW2RldGFpbCA/IGRldGFpbC5pIDogc2VsZWN0ZWRWYWx1ZS5sZW5ndGggLSAxXTtcblxuICAgIGlmIChzZWxlY3RlZFZhbHVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHNlbGVjdGVkVmFsdWUuZmlsdGVyKGl0ZW0gPT4ge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gaXRlbVRvUmVtb3ZlO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZGlzcGF0Y2goXCJjbGVhclwiLCBpdGVtVG9SZW1vdmUpO1xuXG4gICAgZ2V0UG9zaXRpb24oKTtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIGdldFBvc2l0aW9uKCkge1xuICAgIGF3YWl0IHRpY2soKTtcbiAgICBpZiAoIXRhcmdldCB8fCAhY29udGFpbmVyKSByZXR1cm47XG4gICAgY29uc3QgeyB0b3AsIGhlaWdodCwgd2lkdGggfSA9IGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgIHRhcmdldC5zdHlsZVtcIm1pbi13aWR0aFwiXSA9IGAke3dpZHRofXB4YDtcbiAgICB0YXJnZXQuc3R5bGUud2lkdGggPSBgJHtsaXN0QXV0b1dpZHRoID8gXCJhdXRvXCIgOiBcIjEwMCVcIn1gO1xuICAgIHRhcmdldC5zdHlsZS5sZWZ0ID0gXCIwXCI7XG5cbiAgICBpZiAobGlzdFBsYWNlbWVudCA9PT0gXCJ0b3BcIikge1xuICAgICAgdGFyZ2V0LnN0eWxlLmJvdHRvbSA9IGAke2hlaWdodCArIDV9cHhgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0YXJnZXQuc3R5bGUudG9wID0gYCR7aGVpZ2h0ICsgNX1weGA7XG4gICAgfVxuXG4gICAgdGFyZ2V0ID0gdGFyZ2V0O1xuXG4gICAgaWYgKGxpc3RQbGFjZW1lbnQgPT09IFwiYXV0b1wiICYmIGlzT3V0T2ZWaWV3cG9ydCh0YXJnZXQpLmJvdHRvbSkge1xuICAgICAgdGFyZ2V0LnN0eWxlLnRvcCA9IGBgO1xuICAgICAgdGFyZ2V0LnN0eWxlLmJvdHRvbSA9IGAke2hlaWdodCArIDV9cHhgO1xuICAgIH1cblxuICAgIHRhcmdldC5zdHlsZS52aXNpYmlsaXR5ID0gXCJcIjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUtleURvd24oZSkge1xuICAgIGlmICghaXNGb2N1c2VkKSByZXR1cm47XG5cbiAgICBzd2l0Y2ggKGUua2V5KSB7XG4gICAgICBjYXNlIFwiQXJyb3dEb3duXCI6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGlzdE9wZW4gPSB0cnVlO1xuICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgbGlzdE9wZW4gPSB0cnVlO1xuICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJUYWJcIjpcbiAgICAgICAgaWYgKCFsaXN0T3BlbikgaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkJhY2tzcGFjZVwiOlxuICAgICAgICBpZiAoIWlzTXVsdGkgfHwgZmlsdGVyVGV4dC5sZW5ndGggPiAwKSByZXR1cm47XG4gICAgICAgIGlmIChpc011bHRpICYmIHNlbGVjdGVkVmFsdWUgJiYgc2VsZWN0ZWRWYWx1ZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgaGFuZGxlTXVsdGlJdGVtQ2xlYXIoXG4gICAgICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyBhY3RpdmVTZWxlY3RlZFZhbHVlXG4gICAgICAgICAgICAgIDogc2VsZWN0ZWRWYWx1ZS5sZW5ndGggLSAxXG4gICAgICAgICAgKTtcbiAgICAgICAgICBpZiAoYWN0aXZlU2VsZWN0ZWRWYWx1ZSA9PT0gMCB8fCBhY3RpdmVTZWxlY3RlZFZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID1cbiAgICAgICAgICAgIHNlbGVjdGVkVmFsdWUubGVuZ3RoID4gYWN0aXZlU2VsZWN0ZWRWYWx1ZVxuICAgICAgICAgICAgICA/IGFjdGl2ZVNlbGVjdGVkVmFsdWUgLSAxXG4gICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgICBpZiAobGlzdCkgbGlzdC4kc2V0KHsgaG92ZXJJdGVtSW5kZXg6IC0xIH0pO1xuICAgICAgICBpZiAoIWlzTXVsdGkgfHwgZmlsdGVyVGV4dC5sZW5ndGggPiAwKSByZXR1cm47XG5cbiAgICAgICAgaWYgKGFjdGl2ZVNlbGVjdGVkVmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGFjdGl2ZVNlbGVjdGVkVmFsdWUgPSBzZWxlY3RlZFZhbHVlLmxlbmd0aCAtIDE7XG4gICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgc2VsZWN0ZWRWYWx1ZS5sZW5ndGggPiBhY3RpdmVTZWxlY3RlZFZhbHVlICYmXG4gICAgICAgICAgYWN0aXZlU2VsZWN0ZWRWYWx1ZSAhPT0gMFxuICAgICAgICApIHtcbiAgICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlIC09IDE7XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFwiQXJyb3dSaWdodFwiOlxuICAgICAgICBpZiAobGlzdCkgbGlzdC4kc2V0KHsgaG92ZXJJdGVtSW5kZXg6IC0xIH0pO1xuICAgICAgICBpZiAoXG4gICAgICAgICAgIWlzTXVsdGkgfHxcbiAgICAgICAgICBmaWx0ZXJUZXh0Lmxlbmd0aCA+IDAgfHxcbiAgICAgICAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID09PSB1bmRlZmluZWRcbiAgICAgICAgKVxuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgaWYgKGFjdGl2ZVNlbGVjdGVkVmFsdWUgPT09IHNlbGVjdGVkVmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGFjdGl2ZVNlbGVjdGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0gZWxzZSBpZiAoYWN0aXZlU2VsZWN0ZWRWYWx1ZSA8IHNlbGVjdGVkVmFsdWUubGVuZ3RoIC0gMSkge1xuICAgICAgICAgIGFjdGl2ZVNlbGVjdGVkVmFsdWUgKz0gMTtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVGb2N1cygpIHtcbiAgICBpc0ZvY3VzZWQgPSB0cnVlO1xuICAgIGlmIChpbnB1dCkgaW5wdXQuZm9jdXMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUxpc3QoKSB7XG4gICAgcmVzZXRGaWx0ZXIoKTtcbiAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuXG4gICAgaWYgKCFsaXN0KSByZXR1cm47XG4gICAgbGlzdC4kZGVzdHJveSgpO1xuICAgIGxpc3QgPSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoIXRhcmdldCkgcmV0dXJuO1xuICAgIGlmICh0YXJnZXQucGFyZW50Tm9kZSkgdGFyZ2V0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGFyZ2V0KTtcbiAgICB0YXJnZXQgPSB1bmRlZmluZWQ7XG5cbiAgICBsaXN0ID0gbGlzdDtcbiAgICB0YXJnZXQgPSB0YXJnZXQ7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVXaW5kb3dDbGljayhldmVudCkge1xuICAgIGlmICghY29udGFpbmVyKSByZXR1cm47XG4gICAgY29uc3QgZXZlbnRUYXJnZXQgPVxuICAgICAgZXZlbnQucGF0aCAmJiBldmVudC5wYXRoLmxlbmd0aCA+IDAgPyBldmVudC5wYXRoWzBdIDogZXZlbnQudGFyZ2V0O1xuICAgIGlmIChjb250YWluZXIuY29udGFpbnMoZXZlbnRUYXJnZXQpKSByZXR1cm47XG4gICAgaXNGb2N1c2VkID0gZmFsc2U7XG4gICAgbGlzdE9wZW4gPSBmYWxzZTtcbiAgICBhY3RpdmVTZWxlY3RlZFZhbHVlID0gdW5kZWZpbmVkO1xuICAgIGlmIChpbnB1dCkgaW5wdXQuYmx1cigpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlQ2xpY2soKSB7XG4gICAgaWYgKGlzRGlzYWJsZWQpIHJldHVybjtcbiAgICBpc0ZvY3VzZWQgPSB0cnVlO1xuICAgIGxpc3RPcGVuID0gIWxpc3RPcGVuO1xuICB9XG5cbiAgZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUNsZWFyKCkge1xuICAgIHNlbGVjdGVkVmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgbGlzdE9wZW4gPSBmYWxzZTtcbiAgICBkaXNwYXRjaChcImNsZWFyXCIsIHNlbGVjdGVkVmFsdWUpO1xuICAgIGhhbmRsZUZvY3VzKCk7XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkTGlzdCgpIHtcbiAgICBhd2FpdCB0aWNrKCk7XG4gICAgaWYgKHRhcmdldCAmJiBsaXN0KSByZXR1cm47XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgSXRlbSxcbiAgICAgIGZpbHRlclRleHQsXG4gICAgICBvcHRpb25JZGVudGlmaWVyLFxuICAgICAgbm9PcHRpb25zTWVzc2FnZSxcbiAgICAgIGhpZGVFbXB0eVN0YXRlLFxuICAgICAgaXNWaXJ0dWFsTGlzdCxcbiAgICAgIHNlbGVjdGVkVmFsdWUsXG4gICAgICBpc011bHRpLFxuICAgICAgZ2V0R3JvdXBIZWFkZXJMYWJlbCxcbiAgICAgIGl0ZW1zOiBmaWx0ZXJlZEl0ZW1zLFxuICAgICAgaXRlbUhlaWdodFxuICAgIH07XG5cbiAgICBpZiAoZ2V0T3B0aW9uTGFiZWwpIHtcbiAgICAgIGRhdGEuZ2V0T3B0aW9uTGFiZWwgPSBnZXRPcHRpb25MYWJlbDtcbiAgICB9XG5cbiAgICB0YXJnZXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0YXJnZXQuc3R5bGUsIHtcbiAgICAgIHBvc2l0aW9uOiBcImFic29sdXRlXCIsXG4gICAgICBcInotaW5kZXhcIjogMixcbiAgICAgIHZpc2liaWxpdHk6IFwiaGlkZGVuXCJcbiAgICB9KTtcblxuICAgIGxpc3QgPSBsaXN0O1xuICAgIHRhcmdldCA9IHRhcmdldDtcbiAgICBpZiAoY29udGFpbmVyKSBjb250YWluZXIuYXBwZW5kQ2hpbGQodGFyZ2V0KTtcblxuICAgIGxpc3QgPSBuZXcgTGlzdCh7XG4gICAgICB0YXJnZXQsXG4gICAgICBwcm9wczogZGF0YVxuICAgIH0pO1xuXG4gICAgbGlzdC4kb24oXCJpdGVtU2VsZWN0ZWRcIiwgZXZlbnQgPT4ge1xuICAgICAgY29uc3QgeyBkZXRhaWwgfSA9IGV2ZW50O1xuXG4gICAgICBpZiAoZGV0YWlsKSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBPYmplY3QuYXNzaWduKHt9LCBkZXRhaWwpO1xuXG4gICAgICAgIGlmICghaXRlbS5pc0dyb3VwSGVhZGVyIHx8IGl0ZW0uaXNTZWxlY3RhYmxlKSB7XG5cbiAgICAgICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHNlbGVjdGVkVmFsdWUgPyBzZWxlY3RlZFZhbHVlLmNvbmNhdChbaXRlbV0pIDogW2l0ZW1dO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWxlY3RlZFZhbHVlID0gaXRlbTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXNldEZpbHRlcigpO1xuICAgICAgICAgIHNlbGVjdGVkVmFsdWUgPSBzZWxlY3RlZFZhbHVlO1xuXG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBsaXN0T3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgYWN0aXZlU2VsZWN0ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgbGlzdC4kb24oXCJpdGVtQ3JlYXRlZFwiLCBldmVudCA9PiB7XG4gICAgICBjb25zdCB7IGRldGFpbCB9ID0gZXZlbnQ7XG4gICAgICBpZiAoaXNNdWx0aSkge1xuICAgICAgICBzZWxlY3RlZFZhbHVlID0gc2VsZWN0ZWRWYWx1ZSB8fCBbXTtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IFsuLi5zZWxlY3RlZFZhbHVlLCBjcmVhdGVJdGVtKGRldGFpbCldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IGNyZWF0ZUl0ZW0oZGV0YWlsKTtcbiAgICAgIH1cblxuICAgICAgZmlsdGVyVGV4dCA9IFwiXCI7XG4gICAgICBsaXN0T3BlbiA9IGZhbHNlO1xuICAgICAgYWN0aXZlU2VsZWN0ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcbiAgICAgIHJlc2V0RmlsdGVyKCk7XG4gICAgfSk7XG5cbiAgICBsaXN0LiRvbihcImNsb3NlTGlzdFwiLCAoKSA9PiB7XG4gICAgICBsaXN0T3BlbiA9IGZhbHNlO1xuICAgIH0pO1xuXG4gICAgKGxpc3QgPSBsaXN0KSwgKHRhcmdldCA9IHRhcmdldCk7XG4gICAgZ2V0UG9zaXRpb24oKTtcbiAgfVxuXG4gIG9uTW91bnQoKCkgPT4ge1xuICAgIGlmIChpc0ZvY3VzZWQpIGlucHV0LmZvY3VzKCk7XG4gICAgaWYgKGxpc3RPcGVuKSBsb2FkTGlzdCgpO1xuXG4gICAgaWYgKGl0ZW1zICYmIGl0ZW1zLmxlbmd0aCA+IDApIHtcbiAgICAgIG9yaWdpbmFsSXRlbXNDbG9uZSA9IEpTT04uc3RyaW5naWZ5KGl0ZW1zKTtcbiAgICB9XG5cbiAgICBpZiAoc2VsZWN0ZWRWYWx1ZSkge1xuICAgICAgaWYgKGlzTXVsdGkpIHtcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZSA9IHNlbGVjdGVkVmFsdWUubWFwKGl0ZW0gPT4ge1xuICAgICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IGl0ZW0sIGxhYmVsOiBpdGVtIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBvbkRlc3Ryb3koKCkgPT4ge1xuICAgIHJlbW92ZUxpc3QoKTtcbiAgfSk7XG48L3NjcmlwdD5cblxuPHN0eWxlPlxuICAuc2VsZWN0Q29udGFpbmVyIHtcbiAgICAtLXBhZGRpbmc6IDAgMTZweDtcbiAgICBcbiAgICBib3JkZXI6IHZhcigtLWJvcmRlciwgMXB4IHNvbGlkICNkOGRiZGYpO1xuICAgIGJvcmRlci1yYWRpdXM6IHZhcigtLWJvcmRlclJhZGl1cywgM3B4KTtcbiAgICBoZWlnaHQ6IHZhcigtLWhlaWdodCwgNDJweCk7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBwYWRkaW5nOiB2YXIoLS1wYWRkaW5nKTtcbiAgICBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLCAjZmZmKTtcbiAgfVxuXG4gIC5zZWxlY3RDb250YWluZXIgaW5wdXQge1xuICAgIGN1cnNvcjogZGVmYXVsdDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgY29sb3I6IHZhcigtLWlucHV0Q29sb3IsICMzZjRmNWYpO1xuICAgIGhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICBsaW5lLWhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICBwYWRkaW5nOiB2YXIoLS1pbnB1dFBhZGRpbmcsIHZhcigtLXBhZGRpbmcpKTtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbiAgICBmb250LXNpemU6IHZhcigtLWlucHV0Rm9udFNpemUsIDE0cHgpO1xuICAgIGxldHRlci1zcGFjaW5nOiB2YXIoLS1pbnB1dExldHRlclNwYWNpbmcsIC0wLjA4cHgpO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBsZWZ0OiB2YXIoLS1pbnB1dExlZnQsIDApO1xuICB9XG5cbiAgLnNlbGVjdENvbnRhaW5lciBpbnB1dDo6cGxhY2Vob2xkZXIge1xuICAgIGNvbG9yOiB2YXIoLS1wbGFjZWhvbGRlckNvbG9yLCAjNzg4NDhmKTtcbiAgfVxuXG4gIC5zZWxlY3RDb250YWluZXIgaW5wdXQ6Zm9jdXMge1xuICAgIG91dGxpbmU6IG5vbmU7XG4gIH1cblxuICAuc2VsZWN0Q29udGFpbmVyOmhvdmVyIHtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlckhvdmVyQ29sb3IsICNiMmI4YmYpO1xuICB9XG5cbiAgLnNlbGVjdENvbnRhaW5lci5mb2N1c2VkIHtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWJvcmRlckZvY3VzQ29sb3IsICMwMDZmZTgpO1xuICB9XG5cbiAgLnNlbGVjdENvbnRhaW5lci5kaXNhYmxlZCB7XG4gICAgYmFja2dyb3VuZDogdmFyKC0tZGlzYWJsZWRCYWNrZ3JvdW5kLCAjZWJlZGVmKTtcbiAgICBib3JkZXItY29sb3I6IHZhcigtLWRpc2FibGVkQm9yZGVyQ29sb3IsICNlYmVkZWYpO1xuICAgIGNvbG9yOiB2YXIoLS1kaXNhYmxlZENvbG9yLCAjYzFjNmNjKTtcbiAgfVxuXG4gIC5zZWxlY3RDb250YWluZXIuZGlzYWJsZWQgaW5wdXQ6OnBsYWNlaG9sZGVyIHtcbiAgICBjb2xvcjogdmFyKC0tZGlzYWJsZWRQbGFjZWhvbGRlckNvbG9yLCAjYzFjNmNjKTtcbiAgfVxuXG4gIC5zZWxlY3RlZEl0ZW0ge1xuICAgIGxpbmUtaGVpZ2h0OiB2YXIoLS1oZWlnaHQsIDQycHgpO1xuICAgIGhlaWdodDogdmFyKC0taGVpZ2h0LCA0MnB4KTtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47XG4gICAgcGFkZGluZzogdmFyKC0tc2VsZWN0ZWRJdGVtUGFkZGluZywgMCAyMHB4IDAgMCk7XG4gIH1cblxuICAuc2VsZWN0ZWRJdGVtOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICB9XG5cbiAgLmNsZWFyU2VsZWN0IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgcmlnaHQ6IHZhcigtLWNsZWFyU2VsZWN0UmlnaHQsIDEwcHgpO1xuICAgIHRvcDogdmFyKC0tY2xlYXJTZWxlY3RUb3AsIDExcHgpO1xuICAgIGJvdHRvbTogdmFyKC0tY2xlYXJTZWxlY3RCb3R0b20sIDExcHgpO1xuICAgIHdpZHRoOiB2YXIoLS1jbGVhclNlbGVjdFdpZHRoLCAyMHB4KTtcbiAgICBjb2xvcjogdmFyKC0tY2xlYXJTZWxlY3RDb2xvciwgI2M1Y2FjZik7XG4gICAgZmxleDogbm9uZSAhaW1wb3J0YW50O1xuICB9XG5cbiAgLmNsZWFyU2VsZWN0OmhvdmVyIHtcbiAgICBjb2xvcjogdmFyKC0tY2xlYXJTZWxlY3RIb3ZlckNvbG9yLCAjMmMzZTUwKTtcbiAgfVxuXG4gIC5zZWxlY3RDb250YWluZXIuZm9jdXNlZCAuY2xlYXJTZWxlY3Qge1xuICAgIGNvbG9yOiB2YXIoLS1jbGVhclNlbGVjdEZvY3VzQ29sb3IsICMzZjRmNWYpO1xuICB9XG5cbiAgLmluZGljYXRvciB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHJpZ2h0OiB2YXIoLS1pbmRpY2F0b3JSaWdodCwgMTBweCk7XG4gICAgdG9wOiB2YXIoLS1pbmRpY2F0b3JUb3AsIDExcHgpO1xuICAgIHdpZHRoOiB2YXIoLS1pbmRpY2F0b3JXaWR0aCwgMjBweCk7XG4gICAgaGVpZ2h0OiB2YXIoLS1pbmRpY2F0b3JIZWlnaHQsIDIwcHgpO1xuICAgIGNvbG9yOiB2YXIoLS1pbmRpY2F0b3JDb2xvciwgI2M1Y2FjZik7XG4gIH1cblxuICAuaW5kaWNhdG9yIHN2ZyB7XG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIGZpbGw6IHZhcigtLWluZGljYXRvckZpbGwsIGN1cnJlbnRjb2xvcik7XG4gICAgbGluZS1oZWlnaHQ6IDE7XG4gICAgc3Ryb2tlOiB2YXIoLS1pbmRpY2F0b3JTdHJva2UsIGN1cnJlbnRjb2xvcik7XG4gICAgc3Ryb2tlLXdpZHRoOiAwO1xuICB9XG5cbiAgLnNwaW5uZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICByaWdodDogdmFyKC0tc3Bpbm5lclJpZ2h0LCAxMHB4KTtcbiAgICB0b3A6IHZhcigtLXNwaW5uZXJMZWZ0LCAxMXB4KTtcbiAgICB3aWR0aDogdmFyKC0tc3Bpbm5lcldpZHRoLCAyMHB4KTtcbiAgICBoZWlnaHQ6IHZhcigtLXNwaW5uZXJIZWlnaHQsIDIwcHgpO1xuICAgIGNvbG9yOiB2YXIoLS1zcGlubmVyQ29sb3IsICM1MWNlNmMpO1xuICAgIGFuaW1hdGlvbjogcm90YXRlIDAuNzVzIGxpbmVhciBpbmZpbml0ZTtcbiAgfVxuXG4gIC5zcGlubmVyX2ljb24ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgbWFyZ2luOiBhdXRvO1xuICAgIC13ZWJraXQtdHJhbnNmb3JtOiBub25lO1xuICB9XG5cbiAgLnNwaW5uZXJfcGF0aCB7XG4gICAgc3Ryb2tlLWRhc2hhcnJheTogOTA7XG4gICAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xuICB9XG5cbiAgLm11bHRpU2VsZWN0IHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBhZGRpbmc6IHZhcigtLW11bHRpU2VsZWN0UGFkZGluZywgMCAzNXB4IDAgMTZweCk7XG4gICAgaGVpZ2h0OiBhdXRvO1xuICAgIGZsZXgtd3JhcDogd3JhcDtcbiAgfVxuXG4gIC5tdWx0aVNlbGVjdCA+ICoge1xuICAgIGZsZXg6IDEgMSA1MHB4O1xuICB9XG5cbiAgLnNlbGVjdENvbnRhaW5lci5tdWx0aVNlbGVjdCBpbnB1dCB7XG4gICAgcGFkZGluZzogdmFyKC0tbXVsdGlTZWxlY3RJbnB1dFBhZGRpbmcsIDApO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBtYXJnaW46IHZhcigtLW11bHRpU2VsZWN0SW5wdXRNYXJnaW4sIDApO1xuICB9XG5cbiAgLmhhc0Vycm9yIHtcbiAgICBib3JkZXI6IHZhcigtLWVycm9yQm9yZGVyLCAxcHggc29saWQgI2ZmMmQ1NSk7XG4gIH1cblxuICBAa2V5ZnJhbWVzIHJvdGF0ZSB7XG4gICAgMTAwJSB7XG4gICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgzNjBkZWcpO1xuICAgIH1cbiAgfVxuPC9zdHlsZT5cblxuPHN2ZWx0ZTp3aW5kb3dcbiAgb246Y2xpY2s9e2hhbmRsZVdpbmRvd0NsaWNrfVxuICBvbjprZXlkb3duPXtoYW5kbGVLZXlEb3dufVxuICBvbjpyZXNpemU9e2dldFBvc2l0aW9ufSAvPlxuXG48ZGl2XG4gIGNsYXNzPVwie2NvbnRhaW5lckNsYXNzZXN9XG4gIHtoYXNFcnJvciA/ICdoYXNFcnJvcicgOiAnJ31cIlxuICBzdHlsZT17Y29udGFpbmVyU3R5bGVzfVxuICBvbjpjbGljaz17aGFuZGxlQ2xpY2t9XG4gIGJpbmQ6dGhpcz17Y29udGFpbmVyfT5cblxuICB7I2lmIEljb259XG4gICAgPHN2ZWx0ZTpjb21wb25lbnQgdGhpcz17SWNvbn0gLz5cbiAgey9pZn1cblxuICB7I2lmIGlzTXVsdGkgJiYgc2VsZWN0ZWRWYWx1ZSAmJiBzZWxlY3RlZFZhbHVlLmxlbmd0aCA+IDB9XG4gICAgPHN2ZWx0ZTpjb21wb25lbnRcbiAgICAgIHRoaXM9e011bHRpU2VsZWN0aW9ufVxuICAgICAge3NlbGVjdGVkVmFsdWV9XG4gICAgICB7Z2V0U2VsZWN0aW9uTGFiZWx9XG4gICAgICB7YWN0aXZlU2VsZWN0ZWRWYWx1ZX1cbiAgICAgIHtpc0Rpc2FibGVkfVxuICAgICAgb246bXVsdGlJdGVtQ2xlYXI9e2hhbmRsZU11bHRpSXRlbUNsZWFyfVxuICAgICAgb246Zm9jdXM9e2hhbmRsZUZvY3VzfSAvPlxuICB7L2lmfVxuXG4gIHsjaWYgaXNEaXNhYmxlZH1cbiAgICA8aW5wdXRcbiAgICAgIHsuLi5faW5wdXRBdHRyaWJ1dGVzfVxuICAgICAgYmluZDp0aGlzPXtpbnB1dH1cbiAgICAgIG9uOmZvY3VzPXtoYW5kbGVGb2N1c31cbiAgICAgIGJpbmQ6dmFsdWU9e2ZpbHRlclRleHR9XG4gICAgICBwbGFjZWhvbGRlcj17cGxhY2Vob2xkZXJUZXh0fVxuICAgICAgc3R5bGU9e2lucHV0U3R5bGVzfVxuICAgICAgZGlzYWJsZWQgLz5cbiAgezplbHNlfVxuICAgIDxpbnB1dFxuICAgICAgey4uLl9pbnB1dEF0dHJpYnV0ZXN9XG4gICAgICBiaW5kOnRoaXM9e2lucHV0fVxuICAgICAgb246Zm9jdXM9e2hhbmRsZUZvY3VzfVxuICAgICAgYmluZDp2YWx1ZT17ZmlsdGVyVGV4dH1cbiAgICAgIHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlclRleHR9XG4gICAgICBzdHlsZT17aW5wdXRTdHlsZXN9IC8+XG4gIHsvaWZ9XG5cbiAgeyNpZiAhaXNNdWx0aSAmJiBzaG93U2VsZWN0ZWRJdGVtfVxuICAgIDxkaXYgY2xhc3M9XCJzZWxlY3RlZEl0ZW1cIiBvbjpmb2N1cz17aGFuZGxlRm9jdXN9PlxuICAgICAgPHN2ZWx0ZTpjb21wb25lbnRcbiAgICAgICAgdGhpcz17U2VsZWN0aW9ufVxuICAgICAgICBpdGVtPXtzZWxlY3RlZFZhbHVlfVxuICAgICAgICB7Z2V0U2VsZWN0aW9uTGFiZWx9IC8+XG4gICAgPC9kaXY+XG4gIHsvaWZ9XG5cbiAgeyNpZiBzaG93U2VsZWN0ZWRJdGVtICYmIGlzQ2xlYXJhYmxlICYmICFpc0Rpc2FibGVkICYmICFpc1dhaXRpbmd9XG4gICAgPGRpdiBjbGFzcz1cImNsZWFyU2VsZWN0XCIgb246Y2xpY2t8cHJldmVudERlZmF1bHQ9e2hhbmRsZUNsZWFyfT5cbiAgICAgIDxzdmdcbiAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgaGVpZ2h0PVwiMTAwJVwiXG4gICAgICAgIHZpZXdCb3g9XCItMiAtMiA1MCA1MFwiXG4gICAgICAgIGZvY3VzYWJsZT1cImZhbHNlXCJcbiAgICAgICAgcm9sZT1cInByZXNlbnRhdGlvblwiPlxuICAgICAgICA8cGF0aFxuICAgICAgICAgIGZpbGw9XCJjdXJyZW50Q29sb3JcIlxuICAgICAgICAgIGQ9XCJNMzQuOTIzLDM3LjI1MUwyNCwyNi4zMjhMMTMuMDc3LDM3LjI1MUw5LjQzNiwzMy42MWwxMC45MjMtMTAuOTIzTDkuNDM2LDExLjc2NWwzLjY0MS0zLjY0MUwyNCwxOS4wNDdMMzQuOTIzLDguMTI0XG4gICAgICAgICAgbDMuNjQxLDMuNjQxTDI3LjY0MSwyMi42ODhMMzguNTY0LDMzLjYxTDM0LjkyMywzNy4yNTF6XCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICB7L2lmfVxuXG4gIHsjaWYgc2hvd0NoZXZyb24gJiYgIXNlbGVjdGVkVmFsdWUgfHwgKCFpc1NlYXJjaGFibGUgJiYgIWlzRGlzYWJsZWQgJiYgIWlzV2FpdGluZyAmJiAoKHNob3dTZWxlY3RlZEl0ZW0gJiYgIWlzQ2xlYXJhYmxlKSB8fCAhc2hvd1NlbGVjdGVkSXRlbSkpfVxuICAgIDxkaXYgY2xhc3M9XCJpbmRpY2F0b3JcIj5cbiAgICAgIDxzdmdcbiAgICAgICAgd2lkdGg9XCIxMDAlXCJcbiAgICAgICAgaGVpZ2h0PVwiMTAwJVwiXG4gICAgICAgIHZpZXdCb3g9XCIwIDAgMjAgMjBcIlxuICAgICAgICBmb2N1c2FibGU9XCJmYWxzZVwiXG4gICAgICAgIGNsYXNzPVwiY3NzLTE5YnFoMnJcIj5cbiAgICAgICAgPHBhdGhcbiAgICAgICAgICBkPVwiTTQuNTE2IDcuNTQ4YzAuNDM2LTAuNDQ2IDEuMDQzLTAuNDgxIDEuNTc2IDBsMy45MDggMy43NDdcbiAgICAgICAgICAzLjkwOC0zLjc0N2MwLjUzMy0wLjQ4MSAxLjE0MS0wLjQ0NiAxLjU3NCAwIDAuNDM2IDAuNDQ1IDAuNDA4IDEuMTk3IDBcbiAgICAgICAgICAxLjYxNS0wLjQwNiAwLjQxOC00LjY5NSA0LjUwMi00LjY5NSA0LjUwMi0wLjIxNyAwLjIyMy0wLjUwMlxuICAgICAgICAgIDAuMzM1LTAuNzg3IDAuMzM1cy0wLjU3LTAuMTEyLTAuNzg5LTAuMzM1YzBcbiAgICAgICAgICAwLTQuMjg3LTQuMDg0LTQuNjk1LTQuNTAycy0wLjQzNi0xLjE3IDAtMS42MTV6XCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICB7L2lmfVxuXG4gIHsjaWYgaXNXYWl0aW5nfVxuICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyXCI+XG4gICAgICA8c3ZnIGNsYXNzPVwic3Bpbm5lcl9pY29uXCIgdmlld0JveD1cIjI1IDI1IDUwIDUwXCI+XG4gICAgICAgIDxjaXJjbGVcbiAgICAgICAgICBjbGFzcz1cInNwaW5uZXJfcGF0aFwiXG4gICAgICAgICAgY3g9XCI1MFwiXG4gICAgICAgICAgY3k9XCI1MFwiXG4gICAgICAgICAgcj1cIjIwXCJcbiAgICAgICAgICBmaWxsPVwibm9uZVwiXG4gICAgICAgICAgc3Ryb2tlPVwiY3VycmVudENvbG9yXCJcbiAgICAgICAgICBzdHJva2Utd2lkdGg9XCI1XCJcbiAgICAgICAgICBzdHJva2UtbWl0ZXJsaW1pdD1cIjEwXCIgLz5cbiAgICAgIDwvc3ZnPlxuICAgIDwvZGl2PlxuICB7L2lmfVxuPC9kaXY+XG4iLCI8c3R5bGU+XG4gICAgOmdsb2JhbChpbnB1dC5hdXRvY29tcGxldGUtaW5wdXQpIHtcbiAgICAgICAgbWFyZ2luOiAwLjllbTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICB9XG4gICAgLnNlYXJjaCB7XG4gICAgICAgIHdpZHRoOiAyMGVtO1xuICAgICAgICBtYXJnaW46IDAuNmVtO1xuICAgICAgICAtLXBsYWNlaG9sZGVyQ29sb3I6ICM3M2Q1NmI7XG4gICAgICAgIC0tYm9yZGVyUmFkaXVzOiA0cHg7XG4gICAgICAgIC0tY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgZ290byB9IGZyb20gJ0BzYXBwZXIvYXBwJ1xuICAgIGltcG9ydCB7IG9uTW91bnQgfSBmcm9tICdzdmVsdGUnXG4gICAgaW1wb3J0IFNlbGVjdCBmcm9tICdzdmVsdGUtc2VsZWN0J1xuXG4gICAgbGV0IHNlbGVjdGVkVGVhXG4gICAgbGV0IHRlYXMgPSBbXVxuXG4gICAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL2FwaS10ZWEub2lzaWZsb3J1cy5jb20vYXBpL3YxL3RlYXMnKVxuICAgICAgICBjb25zdCBub3JtYWxpemUgPSBzdHIgPT5cbiAgICAgICAgICAgIHN0ci5ub3JtYWxpemUoJ05GRCcpLnJlcGxhY2UoL1tcXHUwMzAwLVxcdTAzNmZdL2csICcnKVxuICAgICAgICBpZiAocmVzLm9rKSB7XG4gICAgICAgICAgICB0ZWFzID0gKGF3YWl0IHJlcy5qc29uKCkpLmFwaVxuICAgICAgICAgICAgdGVhcyA9IHRlYXMubWFwKHRlYSA9PiAoe1xuICAgICAgICAgICAgICAgIHZhbHVlOiB0ZWEuaWRlb2dyYW0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IHRlYS5pZGVvZ3JhbSArICcgLSAnICsgbm9ybWFsaXplKHRlYS5waW55aW4pLFxuICAgICAgICAgICAgICAgIGdyb3VwOiB0ZWEudHlwZVxuICAgICAgICAgICAgfSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGV4dClcbiAgICAgICAgfVxuICAgIH0pXG48L3NjcmlwdD5cblxuPGRpdiBjbGFzcz1cInNlYXJjaFwiPlxuICAgIDxTZWxlY3RcbiAgICAgICAgaXRlbXM9XCJ7dGVhc31cIlxuICAgICAgICBiaW5kOnNlbGVjdGVkVGVhXG4gICAgICAgIHBsYWNlaG9sZGVyPVwicmVjaGVyY2hlXCJcbiAgICAgICAgZ3JvdXBCeT1cInt0ZWEgPT4gdGVhLmdyb3VwfVwiXG4gICAgICAgIG5vT3B0aW9uc01lc3NhZ2U9XCJhdWN1biB0aMOpIHRyb3V2w6lcIlxuICAgICAgICBvbjpzZWxlY3Q9XCJ7dGVhID0+IHtcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGAvZmljaGUtJHt0ZWEuZGV0YWlsLnZhbHVlfWApXG4gICAgICAgIH19XCJcbiAgICAgICAgaW5wdXRTdHlsZXM9XCJjdXJzb3I6IHRleHQ7XCJcbiAgICAvPlxuPC9kaXY+XG4iLCI8c3R5bGU+XG4gICAgbmF2IHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHJnYmEoMjU1LCA2MiwgMCwgMC4xKTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IDMwMDtcbiAgICAgICAgcGFkZGluZzogMCAxZW07XG4gICAgfVxuXG4gICAgdWwge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuXG4gICAgLyogY2xlYXJmaXggKi9cbiAgICB1bDo6YWZ0ZXIge1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGNsZWFyOiBib3RoO1xuICAgIH1cblxuICAgIGxpIHtcbiAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIGZsb2F0OiBsZWZ0O1xuICAgIH1cblxuICAgIFthcmlhLWN1cnJlbnRdIHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgW2FyaWEtY3VycmVudF06OmFmdGVyIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgd2lkdGg6IGNhbGMoMTAwJSAtIDFlbSk7XG4gICAgICAgIGhlaWdodDogMnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjU1LCA2MiwgMCk7XG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICBib3R0b206IC0xcHg7XG4gICAgfVxuXG4gICAgYSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMS4yZW07XG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMWVtIDAuNWVtO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG48L3N0eWxlPlxuXG48c2NyaXB0PlxuICAgIGltcG9ydCBTZWFyY2ggZnJvbSAnLi4vY29tcG9uZW50cy9TZWFyY2guc3ZlbHRlJ1xuICAgIGV4cG9ydCBsZXQgc2VnbWVudFxuPC9zY3JpcHQ+XG5cbjxuYXY+XG4gICAgPHVsPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGFyaWEtY3VycmVudD1cIntzZWdtZW50ID09PSB1bmRlZmluZWQgPyAncGFnZScgOiB1bmRlZmluZWR9XCJcbiAgICAgICAgICAgICAgICBocmVmPVwiLlwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgYWNjdWVpbFxuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIHJlbD1cInByZWZldGNoXCJcbiAgICAgICAgICAgICAgICBhcmlhLWN1cnJlbnQ9XCJ7c2VnbWVudCA9PT0gJ2xpc3RlLWRlcy10aGVzLXRvdXMnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVwiXG4gICAgICAgICAgICAgICAgaHJlZj1cImxpc3RlLWRlcy10aGVzLXRvdXNcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGxpc3RlIGRlcyB0aMOpc1xuICAgICAgICAgICAgPC9hPlxuICAgICAgICA8L2xpPlxuICAgICAgICA8bGk+XG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIHJlbD1cInByZWZldGNoXCJcbiAgICAgICAgICAgICAgICBocmVmPVwiZG9jdW1lbnRhdGlvblwiXG4gICAgICAgICAgICAgICAgYXJpYS1jdXJyZW50PVwie3NlZ21lbnQgPT09ICdkb2N1bWVudGF0aW9uJyA/ICdwYWdlJyA6IHVuZGVmaW5lZH1cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIGRvY3VtZW50YXRpb25cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9saT5cbiAgICAgICAgPGxpPlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICByZWw9XCJwcmVmZXRjaFwiXG4gICAgICAgICAgICAgICAgaHJlZj1cInRlcm1lc1wiXG4gICAgICAgICAgICAgICAgYXJpYS1jdXJyZW50PVwie3NlZ21lbnQgPT09ICd0ZXJtZXMnID8gJ3BhZ2UnIDogdW5kZWZpbmVkfVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgdGVybWVzXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG4gICAgICAgIDxsaT5cbiAgICAgICAgICAgIDxTZWFyY2ggLz5cbiAgICAgICAgPC9saT5cblxuICAgIDwvdWw+XG48L25hdj5cbiIsIjxzY3JpcHQ+XG5cdGV4cG9ydCBsZXQgc3RhdHVzO1xuXHRleHBvcnQgbGV0IGVycm9yO1xuXG5cdGNvbnN0IGRldiA9IFwiZGV2ZWxvcG1lbnRcIiA9PT0gJ2RldmVsb3BtZW50Jztcbjwvc2NyaXB0PlxuXG48c3R5bGU+XG5cdGgxLCBwIHtcblx0XHRtYXJnaW46IDAgYXV0bztcblx0fVxuXG5cdGgxIHtcblx0XHRmb250LXNpemU6IDIuOGVtO1xuXHRcdGZvbnQtd2VpZ2h0OiA3MDA7XG5cdFx0bWFyZ2luOiAwIDAgMC41ZW0gMDtcblx0fVxuXG5cdHAge1xuXHRcdG1hcmdpbjogMWVtIGF1dG87XG5cdH1cblxuXHRAbWVkaWEgKG1pbi13aWR0aDogNDgwcHgpIHtcblx0XHRoMSB7XG5cdFx0XHRmb250LXNpemU6IDRlbTtcblx0XHR9XG5cdH1cbjwvc3R5bGU+XG5cbjxzdmVsdGU6aGVhZD5cblx0PHRpdGxlPntzdGF0dXN9PC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG5cbjxoMT57c3RhdHVzfTwvaDE+XG5cbjxwPntlcnJvci5tZXNzYWdlfTwvcD5cblxueyNpZiBkZXYgJiYgZXJyb3Iuc3RhY2t9XG5cdDxwcmU+e2Vycm9yLnN0YWNrfTwvcHJlPlxuey9pZn1cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFzQkUsS0FBSyxjQUFDLENBQUMsQUFDTCxNQUFNLENBQUUsT0FBTyxDQUNmLE1BQU0sQ0FBRSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FDM0IsV0FBVyxDQUFFLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUNoQyxPQUFPLENBQUUsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLENBQ25DLEtBQUssQ0FBRSxJQUFJLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FDaEMsYUFBYSxDQUFFLFFBQVEsQ0FDdkIsUUFBUSxDQUFFLE1BQU0sQ0FDaEIsV0FBVyxDQUFFLE1BQU0sQUFDckIsQ0FBQyxBQUVELFlBQVksY0FBQyxDQUFDLEFBQ1osY0FBYyxDQUFFLElBQUkseUJBQXlCLENBQUMsVUFBVSxDQUFDLEFBQzNELENBQUMsQUFFRCxVQUFVLGNBQUMsQ0FBQyxBQUNWLFlBQVksQ0FBRSxJQUFJLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxBQUNqRCxDQUFDLEFBRUQsbUJBQUssT0FBTyxBQUFDLENBQUMsQUFDWixVQUFVLENBQUUsSUFBSSxzQkFBc0IsQ0FBQyxRQUFRLENBQUMsQUFDbEQsQ0FBQyxBQUVELEtBQUssT0FBTyxjQUFDLENBQUMsQUFDWixVQUFVLENBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FDMUMsS0FBSyxDQUFFLElBQUksbUJB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 */