input.svelte-1gnqe96.svelte-1gnqe96{width:6em;heigth:2em;border-color:#ddd;font-size:0.9em;color:grey}.mini.svelte-1gnqe96.svelte-1gnqe96{font-size:0.8em;color:grey}.pinyin.svelte-1gnqe96.svelte-1gnqe96{font-size:0.7em;color:#999;font-weight:normal}p.svelte-1gnqe96.svelte-1gnqe96{margin:0;padding:0}.ideogram.svelte-1gnqe96.svelte-1gnqe96{font-weight:normal;font-size:1.5em}.brew.svelte-1gnqe96 td.svelte-1gnqe96{font-size:0.8em;border:1px solid #ccc}
.wrapper.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{display:grid;grid-template-columns:350px 2fr 2fr;grid-gap:1em;color:#444;font-size:1.2em}.box.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{color:#444;padding-left:1em}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{padding:0;height:350px;width:350px;overflow:hidden;-webkit-box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1);-moz-box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1);box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1)}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm img.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0;max-width:100%;transform-origin:65% 75%;transition:transform 1s, filter 0.5s ease-out}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm:hover img.svelte-16ulcqm.svelte-16ulcqm{cursor:zoom-in;transform:scale(4)}.property-title.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin-top:1.5em;font-size:0.8em;font-weight:800}.property-icon.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;margin-top:1em;font-size:0.8em;line-height:2.9em}.property-value.svelte-16ulcqm.svelte-16ulcqm>ul.svelte-16ulcqm.svelte-16ulcqm{margin:0}.property-value.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm,.property-value.svelte-16ulcqm>ul.svelte-16ulcqm>li.svelte-16ulcqm{margin:0;font-size:0.8em}.icons.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0;border:none;background:transparent;display:inline-block;text-align:left;width:18%;line-height:3em}.ideogram-pinyin.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{display:inline-block}.pinyin.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{font-size:0.7em;color:#999;font-weight:normal}p.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0}.ideogram.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{font-weight:normal;font-size:1em}.mountain.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{vertical-align:top}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmljaGUtW2lkZW9ncmFtXS41MDI2NmY2Ny5jc3MiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL0JyZXdzLnN2ZWx0ZSIsIi4uLy4uLy4uL2ZpY2hlLVtpZGVvZ3JhbV0uc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZT5cbiAgICBpbnB1dCB7XG4gICAgICAgIHdpZHRoOiA2ZW07XG4gICAgICAgIGhlaWd0aDogMmVtO1xuICAgICAgICBib3JkZXItY29sb3I6ICNkZGQ7XG4gICAgICAgIGZvbnQtc2l6ZTogMC45ZW07XG4gICAgICAgIGNvbG9yOiBncmV5O1xuICAgIH1cbiAgICAubWluaSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgIGNvbG9yOiBncmV5O1xuICAgIH1cbiAgICAucGlueWluIHtcbiAgICAgICAgZm9udC1zaXplOiAwLjdlbTtcbiAgICAgICAgY29sb3I6ICM5OTk7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgfVxuICAgIHAge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgfVxuICAgIC5pZGVvZ3JhbSB7XG4gICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gICAgICAgIGZvbnQtc2l6ZTogMS41ZW07XG4gICAgfVxuXG4gICAgLmJyZXcgdGQge1xuICAgICAgICBmb250LXNpemU6IDAuOGVtO1xuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCAjY2NjO1xuICAgIH1cbjwvc3R5bGU+XG5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBleHBvcnQgbGV0IGJyZXdcblxuICAgIGxldCBpMThuID0gW11cblxuICAgIG9uTW91bnQoYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGktdGVhLm9pc2lmbG9ydXMuY29tL2FwaS92MS9waW55aW5gKVxuXG4gICAgICAgIGlmIChyZXMub2spIHtcbiAgICAgICAgICAgIGkxOG4gPSAoYXdhaXQgcmVzLmpzb24oKSkuYXBpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyA0MDRcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih0ZXh0KVxuICAgICAgICB9XG4gICAgfSlcbiAgICBmdW5jdGlvbiBnZXRQaW55aW4odGV4dCwgaTE4bikge1xuICAgICAgICBjb25zdCB0ZXJtID0gaTE4bi5maWx0ZXIodGVybSA9PiB0ZXJtLmlkZW9ncmFtID09PSB0ZXh0KVswXSB8fCB7fVxuICAgICAgICByZXR1cm4gJ3BpbnlpbicgaW4gdGVybSA/IHRlcm0ucGlueWluIDogJy0nXG4gICAgfVxuXG4gICAgbGV0IG1sID0gMTAwXG5cbiAgICAkOiB3ZWlnaHQgPSAobWwgLyArYnJldy5xdWFudGl0eS5zcGxpdCgnOicpWzFdKS50b0ZpeGVkKDEpXG5cbiAgICBjb25zdCBkdXJhdGlvbnMgPSArYnJldy5kdXJhdGlvbnMgPyBbYnJldy5kdXJhdGlvbnNdIDogYnJldy5kdXJhdGlvbnNcblxuICAgIGNvbnN0IGRpc3BsYXkgPSB7XG4gICAgICAgIHRpbWVzOiB0aW1lcyA9PiB7XG4gICAgICAgICAgICBpZiAoK3RpbWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RpbWVzfSBpbmZ1c2lvbnNgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbWVzLmxlbmd0aCA9PSAyICYmIEFycmF5LmlzQXJyYXkoW3RpbWVzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGltZXNbMF19IMOgICR7dGltZXNbMV19IGluZnVzaW9uc2BcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgdGVtcGVyYXR1cmVzOiB0ZW1wZXJhdHVyZXMgPT4ge1xuICAgICAgICAgICAgaWYgKCt0ZW1wZXJhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYMOgIHBhcnRpciBkZSAke3RlbXBlcmF0dXJlc33CsGBcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmVzLmxlbmd0aCA9PSAyICYmXG4gICAgICAgICAgICAgICAgQXJyYXkuaXNBcnJheSh0ZW1wZXJhdHVyZXMpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGVudHJlICR7dGVtcGVyYXR1cmVzWzBdfcKwIGV0ICR7dGVtcGVyYXR1cmVzWzFdfcKwYFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjx0YWJsZSBjbGFzcz1cImJyZXdcIj5cbiAgICA8dHI+XG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8cCBjbGFzcz1cImlkZW9ncmFtXCI+e2JyZXcudHlwZX08L3A+XG4gICAgICAgICAgICA8cCBjbGFzcz1cInBpbnlpblwiPntnZXRQaW55aW4oYnJldy50eXBlLCBpMThuKX08L3A+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvdHI+XG4gICAgPHRyPlxuICAgICAgICA8dGQ+e2Rpc3BsYXkudGVtcGVyYXR1cmVzKGJyZXcudGVtcGVyYXR1cmVzKX08L3RkPlxuICAgIDwvdHI+XG4gICAgeyNpZiBicmV3LnRpbWVzfVxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+e2Rpc3BsYXkudGltZXMoYnJldy50aW1lcyl9PC90ZD5cbiAgICAgICAgPC90cj5cbiAgICB7L2lmfVxuICAgIHsjaWYgZHVyYXRpb25zfVxuICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGQ+XG4gICAgICAgICAgICAgICAgPHRhYmxlPlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7I2VhY2ggZHVyYXRpb25zIGFzIGR1cmF0aW9uLCBpbmRleH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+e2luZGV4ICsgMX08L3RkPlxuICAgICAgICAgICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgICAgICAgICA8dHI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7I2VhY2ggZHVyYXRpb25zIGFzIGR1cmF0aW9ufVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD57ZHVyYXRpb259IHNlYzwvdGQ+XG4gICAgICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgIDwvdHI+XG4gICAgey9pZn1cbiAgICA8dGQ+XG4gICAgICAgIFZvdXMgcG91dmV6IHRlc3RlciBhdmVjXG4gICAgICAgIDxzdHJvbmc+e3dlaWdodH0gZzwvc3Ryb25nPlxuICAgICAgICBwb3VyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwibnVtYmVyXCIgc3RlcD1cIjIwXCIgYmluZDp2YWx1ZT1cInttbH1cIiAvPlxuICAgICAgICBtbCAtXG4gICAgICAgIDwhLS0gPGlucHV0IHR5cGU9cmFuZ2UgYmluZDp2YWx1ZT17Yn0gbWluPTAgbWF4PTEwPiAtLT5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtaW5pXCI+KHJhdGlvOiB7YnJldy5xdWFudGl0eX0pPC9zcGFuPlxuICAgIDwvdGQ+XG48L3RhYmxlPlxuIiwiPHN0eWxlPlxuICAgIC53cmFwcGVyIHtcbiAgICAgICAgZGlzcGxheTogZ3JpZDtcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAzNTBweCAyZnIgMmZyO1xuICAgICAgICBncmlkLWdhcDogMWVtO1xuICAgICAgICBjb2xvcjogIzQ0NDtcbiAgICAgICAgZm9udC1zaXplOiAxLjJlbTtcbiAgICB9XG5cbiAgICAuYm94IHtcbiAgICAgICAgY29sb3I6ICM0NDQ7XG4gICAgICAgIHBhZGRpbmctbGVmdDogMWVtO1xuICAgIH1cblxuICAgIC5waG90by16b29tIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgaGVpZ2h0OiAzNTBweDsgLyogWzEuMV0gU2V0IGl0IGFzIHBlciB5b3VyIG5lZWQgKi9cbiAgICAgICAgd2lkdGg6IDM1MHB4O1xuICAgICAgICBvdmVyZmxvdzogaGlkZGVuOyAvKiBbMS4yXSBIaWRlIHRoZSBvdmVyZmxvd2luZyBvZiBjaGlsZCBlbGVtZW50cyAqL1xuICAgICAgICAtd2Via2l0LWJveC1zaGFkb3c6IDZweCA3cHggNXB4IDBweCByZ2JhKDE1NiwgMTU0LCAxNTYsIDEpO1xuICAgICAgICAtbW96LWJveC1zaGFkb3c6IDZweCA3cHggNXB4IDBweCByZ2JhKDE1NiwgMTU0LCAxNTYsIDEpO1xuICAgICAgICBib3gtc2hhZG93OiA2cHggN3B4IDVweCAwcHggcmdiYSgxNTYsIDE1NCwgMTU2LCAxKTtcbiAgICB9XG5cbiAgICAucGhvdG8tem9vbSBpbWcge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogNjUlIDc1JTtcbiAgICAgICAgdHJhbnNpdGlvbjogdHJhbnNmb3JtIDFzLCBmaWx0ZXIgMC41cyBlYXNlLW91dDtcbiAgICB9XG5cbiAgICAucGhvdG8tem9vbTpob3ZlciBpbWcge1xuICAgICAgICBjdXJzb3I6IHpvb20taW47XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoNCk7XG4gICAgfVxuXG4gICAgLnByb3BlcnR5LXRpdGxlIHtcbiAgICAgICAgbWFyZ2luLXRvcDogMS41ZW07XG4gICAgICAgIGZvbnQtc2l6ZTogMC44ZW07XG4gICAgICAgIGZvbnQtd2VpZ2h0OiA4MDA7XG4gICAgfVxuXG4gICAgLnByb3BlcnR5LWljb24ge1xuICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIG1hcmdpbi10b3A6IDFlbTtcbiAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDIuOWVtO1xuICAgIH1cblxuICAgIC5wcm9wZXJ0eS12YWx1ZSA+IHVsIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgIH1cbiAgICAucHJvcGVydHktdmFsdWUsXG4gICAgLnByb3BlcnR5LXZhbHVlID4gdWwgPiBsaSB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgZm9udC1zaXplOiAwLjhlbTtcbiAgICB9XG4gICAgLmljb25zIHtcbiAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICBwYWRkaW5nOiAwO1xuICAgICAgICBib3JkZXI6IG5vbmU7XG4gICAgICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICAgIHdpZHRoOiAxOCU7XG4gICAgICAgIGxpbmUtaGVpZ2h0OiAzZW07XG4gICAgfVxuICAgIC5pZGVvZ3JhbS1waW55aW4ge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuICAgIC5waW55aW4ge1xuICAgICAgICBmb250LXNpemU6IDAuN2VtO1xuICAgICAgICBjb2xvcjogIzk5OTtcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICB9XG4gICAgcCB7XG4gICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICB9XG4gICAgLmlkZW9ncmFtIHtcbiAgICAgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgICAgICAgZm9udC1zaXplOiAxZW07XG4gICAgfVxuXG4gICAgLm1vdW50YWluIHtcbiAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgICB9XG48L3N0eWxlPlxuXG48c2NyaXB0IGNvbnRleHQ9XCJtb2R1bGVcIj5cbiAgICBleHBvcnQgZnVuY3Rpb24gcHJlbG9hZChwYWdlKSB7XG4gICAgICAgIHJldHVybiB7IGlkZW9ncmFtOiBwYWdlLnBhcmFtcy5pZGVvZ3JhbSB9XG4gICAgfVxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgb25Nb3VudCB9IGZyb20gJ3N2ZWx0ZSdcbiAgICBpbXBvcnQgQnJld3MgZnJvbSAnLi4vY29tcG9uZW50cy9CcmV3cy5zdmVsdGUnXG4gICAgaW1wb3J0IEljb25UZWFUeXBlIGZyb20gJy4uL2NvbXBvbmVudHMvSWNvblRlYVR5cGUuc3ZlbHRlJ1xuXG4gICAgaW1wb3J0IHsgc3RvcmVzIH0gZnJvbSAnQHNhcHBlci9hcHAnXG4gICAgY29uc3QgeyBwYWdlIH0gPSBzdG9yZXMoKVxuXG4gICAgZXhwb3J0IGxldCBpZGVvZ3JhbVxuXG4gICAgbGV0IHRlYSA9IHt9XG4gICAgbGV0IGkxOG4gPSBbXVxuXG4gICAgb25Nb3VudChhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKFxuICAgICAgICAgICAgYGh0dHBzOi8vYXBpLXRlYS5vaXNpZmxvcnVzLmNvbS9hcGkvdjEvdGVhLyR7aWRlb2dyYW19YFxuICAgICAgICApXG5cbiAgICAgICAgaWYgKHJlcy5vaykge1xuICAgICAgICAgICAgdGVhID0gKGF3YWl0IHJlcy5qc29uKCkpLmFwaVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gNDA0XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGV4dClcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlczEgPSBhd2FpdCBmZXRjaChgaHR0cHM6Ly9hcGktdGVhLm9pc2lmbG9ydXMuY29tL2FwaS92MS9waW55aW5gKVxuXG4gICAgICAgIGlmIChyZXMxLm9rKSB7XG4gICAgICAgICAgICBpMThuID0gKGF3YWl0IHJlczEuanNvbigpKS5hcGlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIDQwNFxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKHRleHQpXG4gICAgICAgIH1cbiAgICB9KVxuXG4gICAgZnVuY3Rpb24gZ2V0UGlueWluKHRleHQsIGkxOG4pIHtcbiAgICAgICAgY29uc3QgdGVybSA9IGkxOG4uZmlsdGVyKHRlcm0gPT4gdGVybS5pZGVvZ3JhbSA9PT0gdGV4dClbMF0gfHwge31cbiAgICAgICAgcmV0dXJuICdwaW55aW4nIGluIHRlcm0gPyB0ZXJtLnBpbnlpbiA6ICctJ1xuICAgIH1cblxuICAgIGNvbnN0IGRpc3BsYXkgPSB7XG4gICAgICAgIGVsZXZhdGlvbnM6IGVsZXZhdGlvbnMgPT4ge1xuICAgICAgICAgICAgaWYgKCtlbGV2YXRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDDoCBwYXJ0aXIgZGUgJHtlbGV2YXRpb25zfSBtw6h0cmVzYFxuICAgICAgICAgICAgfSBlbHNlIGlmIChlbGV2YXRpb25zLmxlbmd0aCA9PSAyICYmIEFycmF5LmlzQXJyYXkoW2VsZXZhdGlvbnNdKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgJHtlbGV2YXRpb25zWzBdfSDDoCAke2VsZXZhdGlvbnNbMV19IG3DqHRyZXNgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIG94aWRhdGlvbnM6IG94aWRhdGlvbnMgPT4ge1xuICAgICAgICAgICAgaWYgKCtveGlkYXRpb25zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGDDoCBwYXJ0aXIgZGUgJHtveGlkYXRpb25zfSVgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG94aWRhdGlvbnMubGVuZ3RoID09IDIgJiYgQXJyYXkuaXNBcnJheShveGlkYXRpb25zKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBgZW50cmUgJHtveGlkYXRpb25zWzBdfSUgZXQgJHtveGlkYXRpb25zWzFdfSVgXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG48L3NjcmlwdD5cblxuPHN2ZWx0ZTpoZWFkPlxuICAgIDx0aXRsZT5GaWNoZSBkZSB0aMOpPC90aXRsZT5cbjwvc3ZlbHRlOmhlYWQ+XG57I2lmIHRlYS5pZGVvZ3JhbX1cbiAgICA8aDI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpZGVvZ3JhbS1waW55aW5cIj5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwiaWRlb2dyYW1cIj57dGVhLmlkZW9ncmFtfTwvcD5cbiAgICAgICAgICAgIDxwIGNsYXNzPVwicGlueWluXCI+e2dldFBpbnlpbih0ZWEuaWRlb2dyYW0sIGkxOG4pfTwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9oMj5cbiAgICA8ZGl2IGNsYXNzPVwid3JhcHBlclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm94IHBob3RvLXpvb21cIj5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICBzcmM9XCIvYXNzZXRzL3RoZXMve3RlYS5pZGVvZ3JhbX0uanBnXCJcbiAgICAgICAgICAgICAgICBhbHQ9XCJ7dGVhLmlkZW9ncmFtfVwiXG4gICAgICAgICAgICAgICAgdGl0bGU9XCJ7dGVhLmlkZW9ncmFtfVwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJwaG90b1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImJveFwiPlxuICAgICAgICAgICAgPGEgaHJlZj1cIi9saXN0ZS1kZXMtdGhlcy17dGVhLnR5cGV9XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlkZW9ncmFtLXBpbnlpblwiPlxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImlkZW9ncmFtXCI+e3RlYS50eXBlfTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwaW55aW5cIj57Z2V0UGlueWluKHRlYS50eXBlLCBpMThuKX08L3A+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8SWNvblRlYVR5cGUgdHlwZT1cInt0ZWEudHlwZX1cIiAvPlxuICAgICAgICAgICAgPGRsPlxuICAgICAgICAgICAgICAgIHsjaWYgdGVhLmZhbWlsaWVzLmxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwicHJvcGVydHktdGl0bGVcIj5GYW1pbGxlIDo8L2R0PlxuICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJwcm9wZXJ0eS12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiaWRlb2dyYW0tcGlueWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHRlYS5mYW1pbGllcyBhcyBmYW1pbHl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz1cImlkZW9ncmFtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7ZmFtaWx5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwaW55aW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0UGlueWluKGZhbWlseSwgaTE4bil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kZD5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgIHsjaWYgdGVhLm94aWRhdGlvbnMubGVuZ3RofVxuICAgICAgICAgICAgICAgICAgICA8ZHQgY2xhc3M9XCJwcm9wZXJ0eS10aXRsZVwiPk94eWRhdGlvbiA6PC9kdD5cbiAgICAgICAgICAgICAgICAgICAgPGRkIGNsYXNzPVwicHJvcGVydHktdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtkaXNwbGF5Lm94aWRhdGlvbnModGVhLm94aWRhdGlvbnMpfVxuICAgICAgICAgICAgICAgICAgICA8L2RkPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgeyNpZiB0ZWEuZWxldmF0aW9ucy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgICAgIDxkZCBjbGFzcz1cInByb3BlcnR5LWljb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25zIG1vdW50YWluXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9XCIvYXNzZXRzL2ljb25zL21vdW50YWluLnN2Z1wiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PVwiYWx0aXR1ZGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtkaXNwbGF5LmVsZXZhdGlvbnModGVhLmVsZXZhdGlvbnMpfVxuICAgICAgICAgICAgICAgICAgICA8L2RkPlxuICAgICAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgICAgICAgICAgeyNpZiB0ZWEuaGFydmVzdHMubGVuZ3RofVxuICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJwcm9wZXJ0eS12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHRlYS5oYXJ2ZXN0cyBhcyBzZWFzb259XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cImljb25zXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPVwiL2Fzc2V0cy9pY29ucy97c2Vhc29ufS5zdmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9XCJ7c2Vhc29ufVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICAgICAgPC9kZD5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgICAgIHsjaWYgdGVhLnBpY2tpbmdzLmxlbmd0aH1cbiAgICAgICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwicHJvcGVydHktdGl0bGVcIj5DZXVpbGxldHRlIDo8L2R0PlxuICAgICAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJwcm9wZXJ0eS12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiaWRlb2dyYW0tcGlueWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyNlYWNoIHRlYS5waWNraW5ncyBhcyBwaWNrfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9XCJpZGVvZ3JhbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3BpY2t9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInBpbnlpblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRQaW55aW4ocGljaywgaTE4bil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgey9lYWNofVxuICAgICAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICAgICAgPC9kZD5cbiAgICAgICAgICAgICAgICB7L2lmfVxuICAgICAgICAgICAgPC9kbD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJib3hcIj5cbiAgICAgICAgICAgIHsjaWYgdGVhLnByb3ZpbmNlcy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwicHJvcGVydHktdGl0bGVcIj5Qcm92aW5jZXMgOjwvZHQ+XG4gICAgICAgICAgICAgICAgPGRkIGNsYXNzPVwicHJvcGVydHktdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiaWRlb2dyYW0tcGlueWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7I2VhY2ggdGVhLnByb3ZpbmNlcyBhcyBwcm92aW5jZXN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiaWRlb2dyYW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL21hcC5iYWlkdS5jb20vc2VhcmNoLz9xdWVyeXR5cGU9cyZ3ZD17dGVhLnByb3ZpbmNlc31cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3Byb3ZpbmNlc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPVwicGlueWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2dldFBpbnlpbihwcm92aW5jZXMsIGkxOG4pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8L2RkPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgdGVhLnRvd25zLmxlbmd0aH1cbiAgICAgICAgICAgICAgICA8ZHQgY2xhc3M9XCJwcm9wZXJ0eS10aXRsZVwiPlZpbGxlcyA6PC9kdD5cbiAgICAgICAgICAgICAgICA8ZGQgY2xhc3M9XCJwcm9wZXJ0eS12YWx1ZVwiPlxuICAgICAgICAgICAgICAgICAgICA8dWwgY2xhc3M9XCJpZGVvZ3JhbS1waW55aW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsjZWFjaCB0ZWEudG93bnMgYXMgdG93bnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiaWRlb2dyYW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL21hcC5iYWlkdS5jb20vc2VhcmNoLz9xdWVyeXR5cGU9cyZ3ZD17dGVhLnRvd25zfVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dG93bnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cInBpbnlpblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRQaW55aW4odG93bnMsIGkxOG4pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgICAgICAgICAgICAgPC91bD5cbiAgICAgICAgICAgICAgICA8L2RkPlxuICAgICAgICAgICAgey9pZn1cbiAgICAgICAgICAgIHsjaWYgdGVhLmN1bHRpdmFycy5sZW5ndGh9XG4gICAgICAgICAgICAgICAgPGR0IGNsYXNzPVwicHJvcGVydHktdGl0bGVcIj5DdWx0aXZhcnMgOjwvZHQ+XG4gICAgICAgICAgICAgICAgPGRkIGNsYXNzPVwicHJvcGVydHktdmFsdWVcIj5cbiAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPVwiaWRlb2dyYW0tcGlueWluXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7I2VhY2ggdGVhLmN1bHRpdmFycyBhcyBjdWx0aXZhcnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiaWRlb2dyYW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge2N1bHRpdmFyc31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJwaW55aW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRQaW55aW4oY3VsdGl2YXJzLCBpMThuKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICAgICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICAgICAgPC9kZD5cbiAgICAgICAgICAgIHsvaWZ9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwiYm94XCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGhyIC8+XG4gICAgPGgzPkNvbnNlaWwgZCdpbmZ1c2lvbjwvaDM+XG4gICAgPGRpdiBjbGFzcz1cInJvd1wiPlxuICAgICAgICB7I2lmIEFycmF5LmlzQXJyYXkodGVhLmJyZXdzKX1cbiAgICAgICAgICAgIHsjZWFjaCB0ZWEuYnJld3MgYXMgYnJld31cbiAgICAgICAgICAgICAgICA8QnJld3Mge2JyZXd9IC8+XG4gICAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIHsvaWZ9XG4gICAgPC9kaXY+XG57L2lmfVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNJ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 */