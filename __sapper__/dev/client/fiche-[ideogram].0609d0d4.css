input.svelte-1gnqe96.svelte-1gnqe96{width:6em;heigth:2em;border-color:#ddd;font-size:0.9em;color:grey}.mini.svelte-1gnqe96.svelte-1gnqe96{font-size:0.8em;color:grey}.pinyin.svelte-1gnqe96.svelte-1gnqe96{font-size:0.7em;color:#999;font-weight:normal}p.svelte-1gnqe96.svelte-1gnqe96{margin:0;padding:0}.ideogram.svelte-1gnqe96.svelte-1gnqe96{font-weight:normal;font-size:1.5em}.brew.svelte-1gnqe96 td.svelte-1gnqe96{font-size:0.8em;border:1px solid #ccc}
.wrapper.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{display:grid;grid-template-columns:350px 2fr 2fr;grid-gap:1em;color:#444;font-size:1.2em}.box.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{color:#444;padding-left:1em}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{padding:0;height:350px;width:350px;overflow:hidden;-webkit-box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1);-moz-box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1);box-shadow:6px 7px 5px 0px rgba(156, 154, 156, 1)}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm img.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0;max-width:100%;transform-origin:65% 75%;transition:transform 1s, filter 0.5s ease-out}.photo-zoom.svelte-16ulcqm.svelte-16ulcqm:hover img.svelte-16ulcqm.svelte-16ulcqm{cursor:zoom-in;transform:scale(4)}.property-title.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin-top:1.5em;font-size:0.8em;font-weight:800}.property-icon.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;margin-top:1em;font-size:0.8em;line-height:2.9em}.property-value.svelte-16ulcqm.svelte-16ulcqm>ul.svelte-16ulcqm.svelte-16ulcqm{margin:0}.property-value.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm,.property-value.svelte-16ulcqm>ul.svelte-16ulcqm>li.svelte-16ulcqm{margin:0;font-size:0.8em}.icons.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0;border:none;background:transparent;display:inline-block;text-align:left;width:18%;line-height:3em}.ideogram-pinyin.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{display:inline-block}.pinyin.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{font-size:0.7em;color:#999;font-weight:normal}p.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{margin:0;padding:0}.ideogram.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{font-weight:normal;font-size:1em}.mountain.svelte-16ulcqm.svelte-16ulcqm.svelte-16ulcqm{vertical-align:top}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */