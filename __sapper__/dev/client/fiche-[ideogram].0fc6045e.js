import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as globals, p as onMount, v as validate_slots, e as element, t as text$1, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, z as set_data_dev, u as validate_each_argument, a as space, c as claim_space, D as destroy_each, n as noop, H as set_input_value, I as listen_dev, J as to_number, K as stores$1, w as create_component, G as empty, x as claim_component, y as mount_component, A as transition_in, B as transition_out, E as check_outros, C as destroy_component, q as query_selector_all, F as group_outros } from './client.797cf213.js';
import { I as IconTeaType } from './IconTeaType.7d16973e.js';

/* src/components/Brews.svelte generated by Svelte v3.21.0 */

const { Error: Error_1 } = globals;
const file = "src/components/Brews.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

// (91:4) {#if brew.times}
function create_if_block_1(ctx) {
	let tr;
	let td;
	let t_value = /*display*/ ctx[5].times(/*brew*/ ctx[0].times) + "";
	let t;

	const block = {
		c: function create() {
			tr = element("tr");
			td = element("td");
			t = text$1(t_value);
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td = claim_element(tr_nodes, "TD", { class: true });
			var td_nodes = children(td);
			t = claim_text(td_nodes, t_value);
			td_nodes.forEach(detach_dev);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td, "class", "svelte-1gnqe96");
			add_location(td, file, 92, 12, 2142);
			add_location(tr, file, 91, 8, 2125);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td);
			append_dev(td, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*brew*/ 1 && t_value !== (t_value = /*display*/ ctx[5].times(/*brew*/ ctx[0].times) + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(91:4) {#if brew.times}",
		ctx
	});

	return block;
}

// (96:4) {#if durations}
function create_if_block(ctx) {
	let tr2;
	let td;
	let table;
	let tr0;
	let t;
	let tr1;
	let each_value_1 = /*durations*/ ctx[4];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*durations*/ ctx[4];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			tr2 = element("tr");
			td = element("td");
			table = element("table");
			tr0 = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();
			tr1 = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			tr2 = claim_element(nodes, "TR", {});
			var tr2_nodes = children(tr2);
			td = claim_element(tr2_nodes, "TD", { class: true });
			var td_nodes = children(td);
			table = claim_element(td_nodes, "TABLE", {});
			var table_nodes = children(table);
			tr0 = claim_element(table_nodes, "TR", {});
			var tr0_nodes = children(tr0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(tr0_nodes);
			}

			tr0_nodes.forEach(detach_dev);
			t = claim_space(table_nodes);
			tr1 = claim_element(table_nodes, "TR", {});
			var tr1_nodes = children(tr1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tr1_nodes);
			}

			tr1_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			td_nodes.forEach(detach_dev);
			tr2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(tr0, file, 99, 20, 2297);
			add_location(tr1, file, 104, 20, 2490);
			add_location(table, file, 98, 16, 2269);
			attr_dev(td, "class", "svelte-1gnqe96");
			add_location(td, file, 97, 12, 2248);
			add_location(tr2, file, 96, 8, 2231);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr2, anchor);
			append_dev(tr2, td);
			append_dev(td, table);
			append_dev(table, tr0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr0, null);
			}

			append_dev(table, t);
			append_dev(table, tr1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr1, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*durations*/ 16) {
				each_value = /*durations*/ ctx[4];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr2);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(96:4) {#if durations}",
		ctx
	});

	return block;
}

// (101:24) {#each durations as duration, index}
function create_each_block_1(ctx) {
	let td;
	let t_value = /*index*/ ctx[11] + 1 + "";
	let t;

	const block = {
		c: function create() {
			td = element("td");
			t = text$1(t_value);
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			t = claim_text(td_nodes, t_value);
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td, "class", "svelte-1gnqe96");
			add_location(td, file, 101, 28, 2391);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(101:24) {#each durations as duration, index}",
		ctx
	});

	return block;
}

// (106:24) {#each durations as duration}
function create_each_block(ctx) {
	let td;
	let t0_value = /*duration*/ ctx[7] + "";
	let t0;
	let t1;

	const block = {
		c: function create() {
			td = element("td");
			t0 = text$1(t0_value);
			t1 = text$1(" sec");
			this.h();
		},
		l: function claim(nodes) {
			td = claim_element(nodes, "TD", { class: true });
			var td_nodes = children(td);
			t0 = claim_text(td_nodes, t0_value);
			t1 = claim_text(td_nodes, " sec");
			td_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(td, "class", "svelte-1gnqe96");
			add_location(td, file, 106, 28, 2577);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, t0);
			append_dev(td, t1);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(106:24) {#each durations as duration}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let table;
	let tr0;
	let div;
	let p0;
	let t0_value = /*brew*/ ctx[0].type + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*brew*/ ctx[0].type, /*i18n*/ ctx[1]) + "";
	let t2;
	let t3;
	let tr1;
	let td0;
	let t4_value = /*display*/ ctx[5].temperatures(/*brew*/ ctx[0].temperatures) + "";
	let t4;
	let t5;
	let t6;
	let t7;
	let td1;
	let t8;
	let strong;
	let t9;
	let t10;
	let t11;
	let input;
	let t12;
	let span;
	let t13;
	let t14_value = /*brew*/ ctx[0].quantity + "";
	let t14;
	let t15;
	let dispose;
	let if_block0 = /*brew*/ ctx[0].times && create_if_block_1(ctx);
	let if_block1 = /*durations*/ ctx[4] && create_if_block(ctx);

	const block = {
		c: function create() {
			table = element("table");
			tr0 = element("tr");
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			tr1 = element("tr");
			td0 = element("td");
			t4 = text$1(t4_value);
			t5 = space();
			if (if_block0) if_block0.c();
			t6 = space();
			if (if_block1) if_block1.c();
			t7 = space();
			td1 = element("td");
			t8 = text$1("Vous pouvez tester avec\n        ");
			strong = element("strong");
			t9 = text$1(/*weight*/ ctx[3]);
			t10 = text$1(" g");
			t11 = text$1("\n        pour\n        ");
			input = element("input");
			t12 = text$1("\n        ml -\n        \n        ");
			span = element("span");
			t13 = text$1("(ratio: ");
			t14 = text$1(t14_value);
			t15 = text$1(")");
			this.h();
		},
		l: function claim(nodes) {
			table = claim_element(nodes, "TABLE", { class: true });
			var table_nodes = children(table);
			tr0 = claim_element(table_nodes, "TR", {});
			var tr0_nodes = children(tr0);
			div = claim_element(tr0_nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			tr0_nodes.forEach(detach_dev);
			t3 = claim_space(table_nodes);
			tr1 = claim_element(table_nodes, "TR", {});
			var tr1_nodes = children(tr1);
			td0 = claim_element(tr1_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			t4 = claim_text(td0_nodes, t4_value);
			td0_nodes.forEach(detach_dev);
			tr1_nodes.forEach(detach_dev);
			t5 = claim_space(table_nodes);
			if (if_block0) if_block0.l(table_nodes);
			t6 = claim_space(table_nodes);
			if (if_block1) if_block1.l(table_nodes);
			t7 = claim_space(table_nodes);
			td1 = claim_element(table_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			t8 = claim_text(td1_nodes, "Vous pouvez tester avec\n        ");
			strong = claim_element(td1_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t9 = claim_text(strong_nodes, /*weight*/ ctx[3]);
			t10 = claim_text(strong_nodes, " g");
			strong_nodes.forEach(detach_dev);
			t11 = claim_text(td1_nodes, "\n        pour\n        ");
			input = claim_element(td1_nodes, "INPUT", { type: true, step: true, class: true });
			t12 = claim_text(td1_nodes, "\n        ml -\n        \n        ");
			span = claim_element(td1_nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t13 = claim_text(span_nodes, "(ratio: ");
			t14 = claim_text(span_nodes, t14_value);
			t15 = claim_text(span_nodes, ")");
			span_nodes.forEach(detach_dev);
			td1_nodes.forEach(detach_dev);
			table_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-1gnqe96");
			add_location(p0, file, 83, 12, 1894);
			attr_dev(p1, "class", "pinyin svelte-1gnqe96");
			add_location(p1, file, 84, 12, 1942);
			add_location(div, file, 82, 8, 1876);
			add_location(tr0, file, 81, 4, 1863);
			attr_dev(td0, "class", "svelte-1gnqe96");
			add_location(td0, file, 88, 8, 2035);
			add_location(tr1, file, 87, 4, 2022);
			add_location(strong, file, 115, 8, 2775);
			attr_dev(input, "type", "number");
			attr_dev(input, "step", "20");
			attr_dev(input, "class", "svelte-1gnqe96");
			add_location(input, file, 117, 8, 2824);
			attr_dev(span, "class", "mini svelte-1gnqe96");
			add_location(span, file, 120, 8, 2961);
			attr_dev(td1, "class", "svelte-1gnqe96");
			add_location(td1, file, 113, 4, 2730);
			attr_dev(table, "class", "brew svelte-1gnqe96");
			add_location(table, file, 80, 0, 1838);
		},
		m: function mount(target, anchor, remount) {
			insert_dev(target, table, anchor);
			append_dev(table, tr0);
			append_dev(tr0, div);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(table, t3);
			append_dev(table, tr1);
			append_dev(tr1, td0);
			append_dev(td0, t4);
			append_dev(table, t5);
			if (if_block0) if_block0.m(table, null);
			append_dev(table, t6);
			if (if_block1) if_block1.m(table, null);
			append_dev(table, t7);
			append_dev(table, td1);
			append_dev(td1, t8);
			append_dev(td1, strong);
			append_dev(strong, t9);
			append_dev(strong, t10);
			append_dev(td1, t11);
			append_dev(td1, input);
			set_input_value(input, /*ml*/ ctx[2]);
			append_dev(td1, t12);
			append_dev(td1, span);
			append_dev(span, t13);
			append_dev(span, t14);
			append_dev(span, t15);
			if (remount) dispose();
			dispose = listen_dev(input, "input", /*input_input_handler*/ ctx[6]);
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*brew*/ 1 && t0_value !== (t0_value = /*brew*/ ctx[0].type + "")) set_data_dev(t0, t0_value);
			if (dirty & /*brew, i18n*/ 3 && t2_value !== (t2_value = getPinyin(/*brew*/ ctx[0].type, /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);
			if (dirty & /*brew*/ 1 && t4_value !== (t4_value = /*display*/ ctx[5].temperatures(/*brew*/ ctx[0].temperatures) + "")) set_data_dev(t4, t4_value);

			if (/*brew*/ ctx[0].times) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(table, t6);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*durations*/ ctx[4]) if_block1.p(ctx, dirty);
			if (dirty & /*weight*/ 8) set_data_dev(t9, /*weight*/ ctx[3]);

			if (dirty & /*ml*/ 4 && to_number(input.value) !== /*ml*/ ctx[2]) {
				set_input_value(input, /*ml*/ ctx[2]);
			}

			if (dirty & /*brew*/ 1 && t14_value !== (t14_value = /*brew*/ ctx[0].quantity + "")) set_data_dev(t14, t14_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function getPinyin(text, i18n) {
	const term = i18n.filter(term => term.ideogram === text)[0] || {};
	return "pinyin" in term ? term.pinyin : "-";
}

function instance($$self, $$props, $$invalidate) {
	let { brew } = $$props;
	let i18n = [];

	onMount(async () => {
		const res = await fetch(`https://api-tea.oisiflorus.com/api/v1/pinyin`);

		if (res.ok) {
			$$invalidate(1, i18n = (await res.json()).api);
		} else {
			// 404
			throw new Error(text);
		}
	});

	let ml = 100;
	const durations = +brew.durations ? [brew.durations] : brew.durations;

	const display = {
		times: times => {
			if (+times) {
				return `${times} infusions`;
			} else if (times.length == 2 && Array.isArray([times])) {
				return `${times[0]} à ${times[1]} infusions`;
			}
		},
		temperatures: temperatures => {
			if (+temperatures) {
				return `à partir de ${temperatures}°`;
			} else if (temperatures.length == 2 && Array.isArray(temperatures)) {
				return `entre ${temperatures[0]}° et ${temperatures[1]}°`;
			}
		}
	};

	const writable_props = ["brew"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Brews> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Brews", $$slots, []);

	function input_input_handler() {
		ml = to_number(this.value);
		$$invalidate(2, ml);
	}

	$$self.$set = $$props => {
		if ("brew" in $$props) $$invalidate(0, brew = $$props.brew);
	};

	$$self.$capture_state = () => ({
		onMount,
		brew,
		i18n,
		getPinyin,
		ml,
		durations,
		display,
		weight
	});

	$$self.$inject_state = $$props => {
		if ("brew" in $$props) $$invalidate(0, brew = $$props.brew);
		if ("i18n" in $$props) $$invalidate(1, i18n = $$props.i18n);
		if ("ml" in $$props) $$invalidate(2, ml = $$props.ml);
		if ("weight" in $$props) $$invalidate(3, weight = $$props.weight);
	};

	let weight;

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*ml, brew*/ 5) {
			 $$invalidate(3, weight = (ml / +brew.quantity.split(":")[1]).toFixed(1));
		}
	};

	return [brew, i18n, ml, weight, durations, display, input_input_handler];
}

class Brews extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { brew: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Brews",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*brew*/ ctx[0] === undefined && !("brew" in props)) {
			console.warn("<Brews> was created without expected prop 'brew'");
		}
	}

	get brew() {
		throw new Error_1("<Brews>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set brew(value) {
		throw new Error_1("<Brews>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/fiche-[ideogram].svelte generated by Svelte v3.21.0 */

const { Error: Error_1$1, console: console_1 } = globals;
const file$1 = "src/routes/fiche-[ideogram].svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[17] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[20] = list[i];
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	return child_ctx;
}

// (159:0) {#if tea.ideogram}
function create_if_block$1(ctx) {
	let h2;
	let div0;
	let p0;
	let t0_value = /*tea*/ ctx[0].ideogram + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin$1(/*tea*/ ctx[0].ideogram, /*i18n*/ ctx[1]) + "";
	let t2;
	let t3;
	let div6;
	let div1;
	let img;
	let img_src_value;
	let img_alt_value;
	let img_title_value;
	let t4;
	let div3;
	let a;
	let div2;
	let p2;
	let t5_value = /*tea*/ ctx[0].type + "";
	let t5;
	let t6;
	let p3;
	let t7_value = getPinyin$1(/*tea*/ ctx[0].type, /*i18n*/ ctx[1]) + "";
	let t7;
	let a_href_value;
	let t8;
	let t9;
	let dl;
	let if_block0_anchor;
	let if_block1_anchor;
	let if_block2_anchor;
	let if_block3_anchor;
	let t10;
	let div4;
	let t11;
	let t12;
	let t13;
	let div5;
	let t14;
	let hr;
	let t15;
	let h3;
	let t16;
	let t17;
	let div7;
	let show_if = Array.isArray(/*tea*/ ctx[0].brews);
	let current;

	const iconteatype = new IconTeaType({
			props: { type: /*tea*/ ctx[0].type },
			$$inline: true
		});

	let if_block0 = /*tea*/ ctx[0].families.length && create_if_block_9(ctx);
	let if_block1 = /*tea*/ ctx[0].oxidations.length && create_if_block_8(ctx);
	let if_block2 = /*tea*/ ctx[0].elevations.length && create_if_block_7(ctx);
	let if_block3 = /*tea*/ ctx[0].harvests.length && create_if_block_6(ctx);
	let if_block4 = /*tea*/ ctx[0].pickings.length && create_if_block_5(ctx);
	let if_block5 = /*tea*/ ctx[0].provinces.length && create_if_block_4(ctx);
	let if_block6 = /*tea*/ ctx[0].towns.length && create_if_block_3(ctx);
	let if_block7 = /*tea*/ ctx[0].cultivars.length && create_if_block_2(ctx);
	let if_block8 = show_if && create_if_block_1$1(ctx);

	const block = {
		c: function create() {
			h2 = element("h2");
			div0 = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			div6 = element("div");
			div1 = element("div");
			img = element("img");
			t4 = space();
			div3 = element("div");
			a = element("a");
			div2 = element("div");
			p2 = element("p");
			t5 = text$1(t5_value);
			t6 = space();
			p3 = element("p");
			t7 = text$1(t7_value);
			t8 = space();
			create_component(iconteatype.$$.fragment);
			t9 = space();
			dl = element("dl");
			if (if_block0) if_block0.c();
			if_block0_anchor = empty();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			if (if_block4) if_block4.c();
			t10 = space();
			div4 = element("div");
			if (if_block5) if_block5.c();
			t11 = space();
			if (if_block6) if_block6.c();
			t12 = space();
			if (if_block7) if_block7.c();
			t13 = space();
			div5 = element("div");
			t14 = space();
			hr = element("hr");
			t15 = space();
			h3 = element("h3");
			t16 = text$1("Conseil d'infusion");
			t17 = space();
			div7 = element("div");
			if (if_block8) if_block8.c();
			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			div0 = claim_element(h2_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			p0 = claim_element(div0_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div0_nodes);
			p1 = claim_element(div0_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			h2_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			div6 = claim_element(nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div1 = claim_element(div6_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			img = claim_element(div1_nodes, "IMG", {
				src: true,
				alt: true,
				title: true,
				class: true
			});

			div1_nodes.forEach(detach_dev);
			t4 = claim_space(div6_nodes);
			div3 = claim_element(div6_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			a = claim_element(div3_nodes, "A", { href: true });
			var a_nodes = children(a);
			div2 = claim_element(a_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			p2 = claim_element(div2_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t5 = claim_text(p2_nodes, t5_value);
			p2_nodes.forEach(detach_dev);
			t6 = claim_space(div2_nodes);
			p3 = claim_element(div2_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t7 = claim_text(p3_nodes, t7_value);
			p3_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t8 = claim_space(div3_nodes);
			claim_component(iconteatype.$$.fragment, div3_nodes);
			t9 = claim_space(div3_nodes);
			dl = claim_element(div3_nodes, "DL", {});
			var dl_nodes = children(dl);
			if (if_block0) if_block0.l(dl_nodes);
			if_block0_anchor = empty();
			if (if_block1) if_block1.l(dl_nodes);
			if_block1_anchor = empty();
			if (if_block2) if_block2.l(dl_nodes);
			if_block2_anchor = empty();
			if (if_block3) if_block3.l(dl_nodes);
			if_block3_anchor = empty();
			if (if_block4) if_block4.l(dl_nodes);
			dl_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			t10 = claim_space(div6_nodes);
			div4 = claim_element(div6_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			if (if_block5) if_block5.l(div4_nodes);
			t11 = claim_space(div4_nodes);
			if (if_block6) if_block6.l(div4_nodes);
			t12 = claim_space(div4_nodes);
			if (if_block7) if_block7.l(div4_nodes);
			div4_nodes.forEach(detach_dev);
			t13 = claim_space(div6_nodes);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			children(div5).forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t14 = claim_space(nodes);
			hr = claim_element(nodes, "HR", {});
			t15 = claim_space(nodes);
			h3 = claim_element(nodes, "H3", {});
			var h3_nodes = children(h3);
			t16 = claim_text(h3_nodes, "Conseil d'infusion");
			h3_nodes.forEach(detach_dev);
			t17 = claim_space(nodes);
			div7 = claim_element(nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			if (if_block8) if_block8.l(div7_nodes);
			div7_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-16ulcqm");
			add_location(p0, file$1, 161, 12, 3765);
			attr_dev(p1, "class", "pinyin svelte-16ulcqm");
			add_location(p1, file$1, 162, 12, 3816);
			attr_dev(div0, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(div0, file$1, 160, 8, 3723);
			add_location(h2, file$1, 159, 4, 3710);
			if (img.src !== (img_src_value = "/assets/thes/" + /*tea*/ ctx[0].ideogram + ".jpg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*tea*/ ctx[0].ideogram);
			attr_dev(img, "title", img_title_value = /*tea*/ ctx[0].ideogram);
			attr_dev(img, "class", "photo svelte-16ulcqm");
			add_location(img, file$1, 167, 12, 3970);
			attr_dev(div1, "class", "box photo-zoom svelte-16ulcqm");
			add_location(div1, file$1, 166, 8, 3929);
			attr_dev(p2, "class", "ideogram svelte-16ulcqm");
			add_location(p2, file$1, 177, 20, 4307);
			attr_dev(p3, "class", "pinyin svelte-16ulcqm");
			add_location(p3, file$1, 178, 20, 4362);
			attr_dev(div2, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(div2, file$1, 176, 16, 4257);
			attr_dev(a, "href", a_href_value = "/liste-des-thes-" + /*tea*/ ctx[0].type);
			add_location(a, file$1, 175, 12, 4203);
			add_location(dl, file$1, 182, 12, 4510);
			attr_dev(div3, "class", "box svelte-16ulcqm");
			add_location(div3, file$1, 174, 8, 4173);
			attr_dev(div4, "class", "box svelte-16ulcqm");
			add_location(div4, file$1, 242, 8, 7030);
			attr_dev(div5, "class", "box svelte-16ulcqm");
			add_location(div5, file$1, 299, 8, 9490);
			attr_dev(div6, "class", "wrapper svelte-16ulcqm");
			add_location(div6, file$1, 165, 4, 3899);
			add_location(hr, file$1, 301, 4, 9529);
			add_location(h3, file$1, 302, 4, 9540);
			attr_dev(div7, "class", "row");
			add_location(div7, file$1, 303, 4, 9572);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, div0);
			append_dev(div0, p0);
			append_dev(p0, t0);
			append_dev(div0, t1);
			append_dev(div0, p1);
			append_dev(p1, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div1);
			append_dev(div1, img);
			append_dev(div6, t4);
			append_dev(div6, div3);
			append_dev(div3, a);
			append_dev(a, div2);
			append_dev(div2, p2);
			append_dev(p2, t5);
			append_dev(div2, t6);
			append_dev(div2, p3);
			append_dev(p3, t7);
			append_dev(div3, t8);
			mount_component(iconteatype, div3, null);
			append_dev(div3, t9);
			append_dev(div3, dl);
			if (if_block0) if_block0.m(dl, null);
			append_dev(dl, if_block0_anchor);
			if (if_block1) if_block1.m(dl, null);
			append_dev(dl, if_block1_anchor);
			if (if_block2) if_block2.m(dl, null);
			append_dev(dl, if_block2_anchor);
			if (if_block3) if_block3.m(dl, null);
			append_dev(dl, if_block3_anchor);
			if (if_block4) if_block4.m(dl, null);
			append_dev(div6, t10);
			append_dev(div6, div4);
			if (if_block5) if_block5.m(div4, null);
			append_dev(div4, t11);
			if (if_block6) if_block6.m(div4, null);
			append_dev(div4, t12);
			if (if_block7) if_block7.m(div4, null);
			append_dev(div6, t13);
			append_dev(div6, div5);
			insert_dev(target, t14, anchor);
			insert_dev(target, hr, anchor);
			insert_dev(target, t15, anchor);
			insert_dev(target, h3, anchor);
			append_dev(h3, t16);
			insert_dev(target, t17, anchor);
			insert_dev(target, div7, anchor);
			if (if_block8) if_block8.m(div7, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*tea*/ 1) && t0_value !== (t0_value = /*tea*/ ctx[0].ideogram + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*tea, i18n*/ 3) && t2_value !== (t2_value = getPinyin$1(/*tea*/ ctx[0].ideogram, /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);

			if (!current || dirty & /*tea*/ 1 && img.src !== (img_src_value = "/assets/thes/" + /*tea*/ ctx[0].ideogram + ".jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (!current || dirty & /*tea*/ 1 && img_alt_value !== (img_alt_value = /*tea*/ ctx[0].ideogram)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (!current || dirty & /*tea*/ 1 && img_title_value !== (img_title_value = /*tea*/ ctx[0].ideogram)) {
				attr_dev(img, "title", img_title_value);
			}

			if ((!current || dirty & /*tea*/ 1) && t5_value !== (t5_value = /*tea*/ ctx[0].type + "")) set_data_dev(t5, t5_value);
			if ((!current || dirty & /*tea, i18n*/ 3) && t7_value !== (t7_value = getPinyin$1(/*tea*/ ctx[0].type, /*i18n*/ ctx[1]) + "")) set_data_dev(t7, t7_value);

			if (!current || dirty & /*tea*/ 1 && a_href_value !== (a_href_value = "/liste-des-thes-" + /*tea*/ ctx[0].type)) {
				attr_dev(a, "href", a_href_value);
			}

			const iconteatype_changes = {};
			if (dirty & /*tea*/ 1) iconteatype_changes.type = /*tea*/ ctx[0].type;
			iconteatype.$set(iconteatype_changes);

			if (/*tea*/ ctx[0].families.length) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_9(ctx);
					if_block0.c();
					if_block0.m(dl, if_block0_anchor);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*tea*/ ctx[0].oxidations.length) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_8(ctx);
					if_block1.c();
					if_block1.m(dl, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*tea*/ ctx[0].elevations.length) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_7(ctx);
					if_block2.c();
					if_block2.m(dl, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*tea*/ ctx[0].harvests.length) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_6(ctx);
					if_block3.c();
					if_block3.m(dl, if_block3_anchor);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*tea*/ ctx[0].pickings.length) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_5(ctx);
					if_block4.c();
					if_block4.m(dl, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*tea*/ ctx[0].provinces.length) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_4(ctx);
					if_block5.c();
					if_block5.m(div4, t11);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*tea*/ ctx[0].towns.length) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_3(ctx);
					if_block6.c();
					if_block6.m(div4, t12);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (/*tea*/ ctx[0].cultivars.length) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_2(ctx);
					if_block7.c();
					if_block7.m(div4, null);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (dirty & /*tea*/ 1) show_if = Array.isArray(/*tea*/ ctx[0].brews);

			if (show_if) {
				if (if_block8) {
					if_block8.p(ctx, dirty);

					if (dirty & /*tea*/ 1) {
						transition_in(if_block8, 1);
					}
				} else {
					if_block8 = create_if_block_1$1(ctx);
					if_block8.c();
					transition_in(if_block8, 1);
					if_block8.m(div7, null);
				}
			} else if (if_block8) {
				group_outros();

				transition_out(if_block8, 1, 1, () => {
					if_block8 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconteatype.$$.fragment, local);
			transition_in(if_block8);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconteatype.$$.fragment, local);
			transition_out(if_block8);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div6);
			destroy_component(iconteatype);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (detaching) detach_dev(t14);
			if (detaching) detach_dev(hr);
			if (detaching) detach_dev(t15);
			if (detaching) detach_dev(h3);
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(div7);
			if (if_block8) if_block8.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(159:0) {#if tea.ideogram}",
		ctx
	});

	return block;
}

// (184:16) {#if tea.families.length}
function create_if_block_9(ctx) {
	let dt;
	let t0;
	let dd;
	let ul;
	let t1;
	let each_value_6 = /*tea*/ ctx[0].families;
	validate_each_argument(each_value_6);
	let each_blocks = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text$1("Famille :");
			dd = element("dd");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, "Famille :");
			dt_nodes.forEach(detach_dev);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			ul = claim_element(dd_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			t1 = claim_space(dd_nodes);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 184, 20, 4577);
			attr_dev(ul, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(ul, file$1, 186, 24, 4691);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 185, 20, 4639);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t0);
			insert_dev(target, dd, anchor);
			append_dev(dd, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}

			append_dev(dd, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, tea, i18n*/ 3) {
				each_value_6 = /*tea*/ ctx[0].families;
				validate_each_argument(each_value_6);
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_6.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(184:16) {#if tea.families.length}",
		ctx
	});

	return block;
}

// (188:28) {#each tea.families as family}
function create_each_block_6(ctx) {
	let li;
	let t0_value = /*family*/ ctx[23] + "";
	let t0;
	let t1;
	let p;
	let t2_value = getPinyin$1(/*family*/ ctx[23], /*i18n*/ ctx[1]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			p = claim_element(li_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "pinyin svelte-16ulcqm");
			add_location(p, file$1, 190, 36, 4914);
			attr_dev(li, "class", "ideogram svelte-16ulcqm");
			add_location(li, file$1, 188, 32, 4811);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, p);
			append_dev(p, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t0_value !== (t0_value = /*family*/ ctx[23] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*tea, i18n*/ 3 && t2_value !== (t2_value = getPinyin$1(/*family*/ ctx[23], /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(188:28) {#each tea.families as family}",
		ctx
	});

	return block;
}

// (199:16) {#if tea.oxidations.length}
function create_if_block_8(ctx) {
	let dt;
	let t0;
	let dd;
	let t1_value = /*display*/ ctx[2].oxidations(/*tea*/ ctx[0].oxidations) + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text$1("Oxydation :");
			dd = element("dd");
			t1 = text$1(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, "Oxydation :");
			dt_nodes.forEach(detach_dev);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			t1 = claim_text(dd_nodes, t1_value);
			t2 = claim_space(dd_nodes);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 199, 20, 5256);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 200, 20, 5320);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t0);
			insert_dev(target, dd, anchor);
			append_dev(dd, t1);
			append_dev(dd, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t1_value !== (t1_value = /*display*/ ctx[2].oxidations(/*tea*/ ctx[0].oxidations) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(dd);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(199:16) {#if tea.oxidations.length}",
		ctx
	});

	return block;
}

// (205:16) {#if tea.elevations.length}
function create_if_block_7(ctx) {
	let dd;
	let img;
	let img_src_value;
	let t0;
	let t1_value = /*display*/ ctx[2].elevations(/*tea*/ ctx[0].elevations) + "";
	let t1;
	let t2;

	const block = {
		c: function create() {
			dd = element("dd");
			img = element("img");
			t0 = space();
			t1 = text$1(t1_value);
			t2 = space();
			this.h();
		},
		l: function claim(nodes) {
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			img = claim_element(dd_nodes, "IMG", { class: true, src: true, alt: true });
			t0 = claim_space(dd_nodes);
			t1 = claim_text(dd_nodes, t1_value);
			t2 = claim_space(dd_nodes);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "icons mountain svelte-16ulcqm");
			if (img.src !== (img_src_value = "/assets/icons/mountain.svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "altitude");
			add_location(img, file$1, 206, 24, 5572);
			attr_dev(dd, "class", "property-icon svelte-16ulcqm");
			add_location(dd, file$1, 205, 20, 5521);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dd, anchor);
			append_dev(dd, img);
			append_dev(dd, t0);
			append_dev(dd, t1);
			append_dev(dd, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t1_value !== (t1_value = /*display*/ ctx[2].elevations(/*tea*/ ctx[0].elevations) + "")) set_data_dev(t1, t1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dd);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(205:16) {#if tea.elevations.length}",
		ctx
	});

	return block;
}

// (215:16) {#if tea.harvests.length}
function create_if_block_6(ctx) {
	let dd;
	let t;
	let each_value_5 = /*tea*/ ctx[0].harvests;
	validate_each_argument(each_value_5);
	let each_blocks = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	const block = {
		c: function create() {
			dd = element("dd");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			this.h();
		},
		l: function claim(nodes) {
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(dd_nodes);
			}

			t = claim_space(dd_nodes);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 215, 20, 5930);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dd, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(dd, null);
			}

			append_dev(dd, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1) {
				each_value_5 = /*tea*/ ctx[0].harvests;
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(dd, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_5.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(215:16) {#if tea.harvests.length}",
		ctx
	});

	return block;
}

// (217:24) {#each tea.harvests as season}
function create_each_block_5(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", "icons svelte-16ulcqm");
			if (img.src !== (img_src_value = "/assets/icons/" + /*season*/ ctx[20] + ".svg")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", img_alt_value = /*season*/ ctx[20]);
			add_location(img, file$1, 217, 28, 6041);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && img.src !== (img_src_value = "/assets/icons/" + /*season*/ ctx[20] + ".svg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*tea*/ 1 && img_alt_value !== (img_alt_value = /*season*/ ctx[20])) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(217:24) {#each tea.harvests as season}",
		ctx
	});

	return block;
}

// (226:16) {#if tea.pickings.length}
function create_if_block_5(ctx) {
	let dt;
	let t;
	let dd;
	let ul;
	let each_value_4 = /*tea*/ ctx[0].pickings;
	validate_each_argument(each_value_4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const block = {
		c: function create() {
			dt = element("dt");
			t = text$1("Ceuillette :");
			dd = element("dd");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t = claim_text(dt_nodes, "Ceuillette :");
			dt_nodes.forEach(detach_dev);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			ul = claim_element(dd_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 226, 20, 6377);
			attr_dev(ul, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(ul, file$1, 228, 24, 6494);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 227, 20, 6442);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t);
			insert_dev(target, dd, anchor);
			append_dev(dd, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, tea, i18n*/ 3) {
				each_value_4 = /*tea*/ ctx[0].pickings;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(226:16) {#if tea.pickings.length}",
		ctx
	});

	return block;
}

// (230:28) {#each tea.pickings as pick}
function create_each_block_4(ctx) {
	let li;
	let t0_value = /*pick*/ ctx[17] + "";
	let t0;
	let t1;
	let p;
	let t2_value = getPinyin$1(/*pick*/ ctx[17], /*i18n*/ ctx[1]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			p = claim_element(li_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "pinyin svelte-16ulcqm");
			add_location(p, file$1, 232, 36, 6713);
			attr_dev(li, "class", "ideogram svelte-16ulcqm");
			add_location(li, file$1, 230, 32, 6612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, p);
			append_dev(p, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t0_value !== (t0_value = /*pick*/ ctx[17] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*tea, i18n*/ 3 && t2_value !== (t2_value = getPinyin$1(/*pick*/ ctx[17], /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(230:28) {#each tea.pickings as pick}",
		ctx
	});

	return block;
}

// (244:12) {#if tea.provinces.length}
function create_if_block_4(ctx) {
	let dt;
	let t0;
	let t1;
	let dd;
	let ul;
	let each_value_3 = /*tea*/ ctx[0].provinces;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text$1("Provinces :");
			t1 = space();
			dd = element("dd");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, "Provinces :");
			dt_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			ul = claim_element(dd_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 244, 16, 7103);
			attr_dev(ul, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(ul, file$1, 246, 20, 7211);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 245, 16, 7163);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, dd, anchor);
			append_dev(dd, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea, getPinyin, i18n*/ 3) {
				each_value_3 = /*tea*/ ctx[0].provinces;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(244:12) {#if tea.provinces.length}",
		ctx
	});

	return block;
}

// (248:24) {#each tea.provinces as provinces}
function create_each_block_3(ctx) {
	let li;
	let a;
	let t0_value = /*provinces*/ ctx[14] + "";
	let t0;
	let t1;
	let p;
	let t2_value = getPinyin$1(/*provinces*/ ctx[14], /*i18n*/ ctx[1]) + "";
	let t2;
	let a_href_value;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "pinyin svelte-16ulcqm");
			add_location(p, file$1, 254, 36, 7658);
			attr_dev(a, "href", a_href_value = "https://map.baidu.com/search/?querytype=s&wd=" + /*tea*/ ctx[0].provinces);
			attr_dev(a, "target", "_blank");
			add_location(a, file$1, 249, 32, 7381);
			attr_dev(li, "class", "ideogram svelte-16ulcqm");
			add_location(li, file$1, 248, 28, 7327);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(a, t1);
			append_dev(a, p);
			append_dev(p, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t0_value !== (t0_value = /*provinces*/ ctx[14] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*tea, i18n*/ 3 && t2_value !== (t2_value = getPinyin$1(/*provinces*/ ctx[14], /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);

			if (dirty & /*tea*/ 1 && a_href_value !== (a_href_value = "https://map.baidu.com/search/?querytype=s&wd=" + /*tea*/ ctx[0].provinces)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(248:24) {#each tea.provinces as provinces}",
		ctx
	});

	return block;
}

// (264:12) {#if tea.towns.length}
function create_if_block_3(ctx) {
	let dt;
	let t0;
	let t1;
	let dd;
	let ul;
	let each_value_2 = /*tea*/ ctx[0].towns;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text$1("Villes :");
			t1 = space();
			dd = element("dd");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, "Villes :");
			dt_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			ul = claim_element(dd_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 264, 16, 8007);
			attr_dev(ul, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(ul, file$1, 266, 20, 8112);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 265, 16, 8064);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, dd, anchor);
			append_dev(dd, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea, getPinyin, i18n*/ 3) {
				each_value_2 = /*tea*/ ctx[0].towns;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(264:12) {#if tea.towns.length}",
		ctx
	});

	return block;
}

// (268:24) {#each tea.towns as towns}
function create_each_block_2(ctx) {
	let li;
	let a;
	let t0_value = /*towns*/ ctx[11] + "";
	let t0;
	let t1;
	let p;
	let t2_value = getPinyin$1(/*towns*/ ctx[11], /*i18n*/ ctx[1]) + "";
	let t2;
	let a_href_value;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			a = element("a");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			a = claim_element(li_nodes, "A", { href: true, target: true });
			var a_nodes = children(a);
			t0 = claim_text(a_nodes, t0_value);
			t1 = claim_space(a_nodes);
			p = claim_element(a_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "pinyin svelte-16ulcqm");
			add_location(p, file$1, 274, 36, 8543);
			attr_dev(a, "href", a_href_value = "https://map.baidu.com/search/?querytype=s&wd=" + /*tea*/ ctx[0].towns);
			attr_dev(a, "target", "_blank");
			add_location(a, file$1, 269, 32, 8274);
			attr_dev(li, "class", "ideogram svelte-16ulcqm");
			add_location(li, file$1, 268, 28, 8220);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, a);
			append_dev(a, t0);
			append_dev(a, t1);
			append_dev(a, p);
			append_dev(p, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t0_value !== (t0_value = /*towns*/ ctx[11] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*tea, i18n*/ 3 && t2_value !== (t2_value = getPinyin$1(/*towns*/ ctx[11], /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);

			if (dirty & /*tea*/ 1 && a_href_value !== (a_href_value = "https://map.baidu.com/search/?querytype=s&wd=" + /*tea*/ ctx[0].towns)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(268:24) {#each tea.towns as towns}",
		ctx
	});

	return block;
}

// (284:12) {#if tea.cultivars.length}
function create_if_block_2(ctx) {
	let dt;
	let t0;
	let t1;
	let dd;
	let ul;
	let each_value_1 = /*tea*/ ctx[0].cultivars;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			dt = element("dt");
			t0 = text$1("Cultivars :");
			t1 = space();
			dd = element("dd");
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			dt = claim_element(nodes, "DT", { class: true });
			var dt_nodes = children(dt);
			t0 = claim_text(dt_nodes, "Cultivars :");
			dt_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			dd = claim_element(nodes, "DD", { class: true });
			var dd_nodes = children(dd);
			ul = claim_element(dd_nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			dd_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(dt, "class", "property-title svelte-16ulcqm");
			add_location(dt, file$1, 284, 16, 8892);
			attr_dev(ul, "class", "ideogram-pinyin svelte-16ulcqm");
			add_location(ul, file$1, 286, 20, 9000);
			attr_dev(dd, "class", "property-value svelte-16ulcqm");
			add_location(dd, file$1, 285, 16, 8952);
		},
		m: function mount(target, anchor) {
			insert_dev(target, dt, anchor);
			append_dev(dt, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, dd, anchor);
			append_dev(dd, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, tea, i18n*/ 3) {
				each_value_1 = /*tea*/ ctx[0].cultivars;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(dt);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(dd);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(284:12) {#if tea.cultivars.length}",
		ctx
	});

	return block;
}

// (288:24) {#each tea.cultivars as cultivars}
function create_each_block_1$1(ctx) {
	let li;
	let t0_value = /*cultivars*/ ctx[8] + "";
	let t0;
	let t1;
	let p;
	let t2_value = getPinyin$1(/*cultivars*/ ctx[8], /*i18n*/ ctx[1]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = space();
			p = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { class: true });
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_space(li_nodes);
			p = claim_element(li_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, t2_value);
			p_nodes.forEach(detach_dev);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "pinyin svelte-16ulcqm");
			add_location(p, file$1, 290, 32, 9214);
			attr_dev(li, "class", "ideogram svelte-16ulcqm");
			add_location(li, file$1, 288, 28, 9116);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, p);
			append_dev(p, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1 && t0_value !== (t0_value = /*cultivars*/ ctx[8] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*tea, i18n*/ 3 && t2_value !== (t2_value = getPinyin$1(/*cultivars*/ ctx[8], /*i18n*/ ctx[1]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(288:24) {#each tea.cultivars as cultivars}",
		ctx
	});

	return block;
}

// (305:8) {#if Array.isArray(tea.brews)}
function create_if_block_1$1(ctx) {
	let each_1_anchor;
	let current;
	let each_value = /*tea*/ ctx[0].brews;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*tea*/ 1) {
				each_value = /*tea*/ ctx[0].brews;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(305:8) {#if Array.isArray(tea.brews)}",
		ctx
	});

	return block;
}

// (306:12) {#each tea.brews as brew}
function create_each_block$1(ctx) {
	let current;

	const brews = new Brews({
			props: { brew: /*brew*/ ctx[5] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(brews.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(brews.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(brews, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const brews_changes = {};
			if (dirty & /*tea*/ 1) brews_changes.brew = /*brew*/ ctx[5];
			brews.$set(brews_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(brews.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(brews.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(brews, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(306:12) {#each tea.brews as brew}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let t;
	let if_block_anchor;
	let current;
	let if_block = /*tea*/ ctx[0].ideogram && create_if_block$1(ctx);

	const block = {
		c: function create() {
			t = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1xa11q0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			document.title = "Fiche de thé";
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (/*tea*/ ctx[0].ideogram) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*tea*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block$1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload(page) {
	return { ideogram: page.params.ideogram };
}

function getPinyin$1(text, i18n) {
	const term = i18n.filter(term => term.ideogram === text)[0] || {};
	return "pinyin" in term ? term.pinyin : "-";
}

function instance$1($$self, $$props, $$invalidate) {
	const { page } = stores$1();
	console.log("pages", page);
	let { ideogram } = $$props;
	let tea = {};
	let i18n = [];

	onMount(async () => {
		const res = await fetch(`https://api-tea.oisiflorus.com/api/v1/tea/${ideogram}`);

		if (res.ok) {
			$$invalidate(0, tea = (await res.json()).api);
		} else {
			// 404
			throw new Error(text);
		}

		const res1 = await fetch(`https://api-tea.oisiflorus.com/api/v1/pinyin`);

		if (res1.ok) {
			$$invalidate(1, i18n = (await res1.json()).api);
		} else {
			// 404
			throw new Error(text);
		}
	});

	const display = {
		elevations: elevations => {
			if (+elevations) {
				return `à partir de ${elevations} mètres`;
			} else if (elevations.length == 2 && Array.isArray([elevations])) {
				return `${elevations[0]} à ${elevations[1]} mètres`;
			}
		},
		oxidations: oxidations => {
			if (+oxidations) {
				return `à partir de ${oxidations}%`;
			} else if (oxidations.length == 2 && Array.isArray(oxidations)) {
				return `entre ${oxidations[0]}% et ${oxidations[1]}%`;
			}
		}
	};

	const writable_props = ["ideogram"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Fiche_u5Bideogramu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Fiche_u5Bideogramu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("ideogram" in $$props) $$invalidate(3, ideogram = $$props.ideogram);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		Brews,
		IconTeaType,
		stores: stores$1,
		page,
		ideogram,
		tea,
		i18n,
		getPinyin: getPinyin$1,
		display
	});

	$$self.$inject_state = $$props => {
		if ("ideogram" in $$props) $$invalidate(3, ideogram = $$props.ideogram);
		if ("tea" in $$props) $$invalidate(0, tea = $$props.tea);
		if ("i18n" in $$props) $$invalidate(1, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [tea, i18n, display, ideogram];
}

class Fiche_u5Bideogramu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { ideogram: 3 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Fiche_u5Bideogramu5D",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*ideogram*/ ctx[3] === undefined && !("ideogram" in props)) {
			console_1.warn("<Fiche_u5Bideogramu5D> was created without expected prop 'ideogram'");
		}
	}

	get ideogram() {
		throw new Error_1$1("<Fiche_u5Bideogramu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ideogram(value) {
		throw new Error_1$1("<Fiche_u5Bideogramu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Fiche_u5Bideogramu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
