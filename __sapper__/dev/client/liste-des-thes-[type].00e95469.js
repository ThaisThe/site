import { S as SvelteComponentDev, i as init, d as dispatch_dev, o as globals, s as safe_not_equal, u as validate_each_argument, p as onMount, v as validate_slots, e as element, t as text$1, f as claim_element, g as children, h as claim_text, b as detach_dev, j as attr_dev, k as add_location, l as insert_dev, m as append_dev, a as space, w as create_component, c as claim_space, x as claim_component, y as mount_component, z as set_data_dev, A as transition_in, B as transition_out, C as destroy_component, D as destroy_each, q as query_selector_all, E as check_outros, F as group_outros, n as noop, G as empty } from './client.a295cbe2.js';
import { I as IconTeaType } from './IconTeaType.ef832d26.js';

/* src/routes/liste-des-thes-[type].svelte generated by Svelte v3.21.0 */

const { Error: Error_1 } = globals;
const file = "src/routes/liste-des-thes-[type].svelte";

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[21] = list[i];
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	return child_ctx;
}

// (243:4) {:else}
function create_else_block_10(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text$1("chargement des types thés...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "chargement des types thés...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-ycjrao");
			add_location(p, file, 244, 8, 8860);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_10.name,
		type: "else",
		source: "(243:4) {:else}",
		ctx
	});

	return block;
}

// (237:16) {:else}
function create_else_block_9(ctx) {
	let p;
	let t;

	const block = {
		c: function create() {
			p = element("p");
			t = text$1("chargement des thés...");
			this.h();
		},
		l: function claim(nodes) {
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t = claim_text(p_nodes, "chargement des thés...");
			p_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "svelte-ycjrao");
			add_location(p, file, 238, 20, 8689);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_9.name,
		type: "else",
		source: "(237:16) {:else}",
		ctx
	});

	return block;
}

// (151:28) {:else}
function create_else_block_8(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text$1("-");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "-");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_8.name,
		type: "else",
		source: "(151:28) {:else}",
		ctx
	});

	return block;
}

// (142:28) {#if tea.families}
function create_if_block_8(ctx) {
	let each_1_anchor;
	let each_value_6 = /*tea*/ ctx[9].families;
	validate_each_argument(each_value_6);
	let each_blocks = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, getTeasByType, typeToDisplay, typeParam, types, teas, i18n*/ 63) {
				each_value_6 = /*tea*/ ctx[9].families;
				validate_each_argument(each_value_6);
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_6.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(142:28) {#if tea.families}",
		ctx
	});

	return block;
}

// (143:32) {#each tea.families as family}
function create_each_block_6(ctx) {
	let div;
	let p0;
	let t0_value = /*family*/ ctx[24] + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*family*/ ctx[24], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			t3 = claim_space(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 144, 40, 3905);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 145, 40, 3978);
			add_location(div, file, 143, 36, 3859);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(div, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*family*/ ctx[24] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*family*/ ctx[24], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(143:32) {#each tea.families as family}",
		ctx
	});

	return block;
}

// (172:28) {:else}
function create_else_block_7(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text$1("-");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "-");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_7.name,
		type: "else",
		source: "(172:28) {:else}",
		ctx
	});

	return block;
}

// (155:28) {#if tea.cultivars}
function create_if_block_6(ctx) {
	let if_block_anchor;

	function select_block_type_2(ctx, dirty) {
		if (typeof /*tea*/ ctx[9].cultivars === "string") return create_if_block_7;
		return create_else_block_6;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(155:28) {#if tea.cultivars}",
		ctx
	});

	return block;
}

// (163:32) {:else}
function create_else_block_6(ctx) {
	let ul;
	let each_value_5 = /*tea*/ ctx[9].cultivars;
	validate_each_argument(each_value_5);
	let each_blocks = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-ycjrao");
			add_location(ul, file, 163, 36, 4893);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, getTeasByType, typeToDisplay, typeParam, types, teas, i18n*/ 63) {
				each_value_5 = /*tea*/ ctx[9].cultivars;
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_5.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_6.name,
		type: "else",
		source: "(163:32) {:else}",
		ctx
	});

	return block;
}

// (156:32) {#if typeof tea.cultivars === 'string'}
function create_if_block_7(ctx) {
	let div;
	let p0;
	let t0_value = /*tea*/ ctx[9].cultivars + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*tea*/ ctx[9].cultivars, /*i18n*/ ctx[3]) + "";
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 157, 40, 4553);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 158, 40, 4633);
			add_location(div, file, 156, 36, 4507);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*tea*/ ctx[9].cultivars + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*tea*/ ctx[9].cultivars, /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(156:32) {#if typeof tea.cultivars === 'string'}",
		ctx
	});

	return block;
}

// (165:40) {#each tea.cultivars as cultivars}
function create_each_block_5(ctx) {
	let li;
	let t0_value = /*cultivars*/ ctx[21] + "";
	let t0;
	let t1;
	let t2_value = getPinyin(/*cultivars*/ ctx[21], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = text$1(" - ");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_text(li_nodes, " - ");
			t2 = claim_text(li_nodes, t2_value);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 165, 44, 5017);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*cultivars*/ ctx[21] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*cultivars*/ ctx[21], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(165:40) {#each tea.cultivars as cultivars}",
		ctx
	});

	return block;
}

// (192:28) {:else}
function create_else_block_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text$1("-");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "-");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_5.name,
		type: "else",
		source: "(192:28) {:else}",
		ctx
	});

	return block;
}

// (175:28) {#if tea.provinces}
function create_if_block_4(ctx) {
	let if_block_anchor;

	function select_block_type_4(ctx, dirty) {
		if (typeof /*tea*/ ctx[9].provinces === "string") return create_if_block_5;
		return create_else_block_4;
	}

	let current_block_type = select_block_type_4(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_4(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(175:28) {#if tea.provinces}",
		ctx
	});

	return block;
}

// (183:32) {:else}
function create_else_block_4(ctx) {
	let ul;
	let each_value_4 = /*tea*/ ctx[9].provinces;
	validate_each_argument(each_value_4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-ycjrao");
			add_location(ul, file, 183, 36, 5934);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, getTeasByType, typeToDisplay, typeParam, types, teas, i18n*/ 63) {
				each_value_4 = /*tea*/ ctx[9].provinces;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(183:32) {:else}",
		ctx
	});

	return block;
}

// (176:32) {#if typeof tea.provinces === 'string'}
function create_if_block_5(ctx) {
	let div;
	let p0;
	let t0_value = /*tea*/ ctx[9].provinces + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*tea*/ ctx[9].provinces, /*i18n*/ ctx[3]) + "";
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 177, 40, 5594);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 178, 40, 5674);
			add_location(div, file, 176, 36, 5548);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*tea*/ ctx[9].provinces + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*tea*/ ctx[9].provinces, /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(176:32) {#if typeof tea.provinces === 'string'}",
		ctx
	});

	return block;
}

// (185:40) {#each tea.provinces as provinces}
function create_each_block_4(ctx) {
	let li;
	let t0_value = /*provinces*/ ctx[18] + "";
	let t0;
	let t1;
	let t2_value = getPinyin(/*provinces*/ ctx[18], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = text$1(" - ");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_text(li_nodes, " - ");
			t2 = claim_text(li_nodes, t2_value);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 185, 44, 6058);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*provinces*/ ctx[18] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*provinces*/ ctx[18], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(185:40) {#each tea.provinces as provinces}",
		ctx
	});

	return block;
}

// (212:28) {:else}
function create_else_block_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text$1("-");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "-");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(212:28) {:else}",
		ctx
	});

	return block;
}

// (195:28) {#if tea.towns}
function create_if_block_2(ctx) {
	let if_block_anchor;

	function select_block_type_6(ctx, dirty) {
		if (typeof /*tea*/ ctx[9].towns === "string") return create_if_block_3;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_6(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_6(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(195:28) {#if tea.towns}",
		ctx
	});

	return block;
}

// (203:32) {:else}
function create_else_block_2(ctx) {
	let ul;
	let each_value_3 = /*tea*/ ctx[9].towns;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-ycjrao");
			add_location(ul, file, 203, 36, 6959);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, getTeasByType, typeToDisplay, typeParam, types, teas, i18n*/ 63) {
				each_value_3 = /*tea*/ ctx[9].towns;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(203:32) {:else}",
		ctx
	});

	return block;
}

// (196:32) {#if typeof tea.towns === 'string'}
function create_if_block_3(ctx) {
	let div;
	let p0;
	let t0_value = /*tea*/ ctx[9].towns + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*tea*/ ctx[9].towns, /*i18n*/ ctx[3]) + "";
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 197, 40, 6627);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 198, 40, 6703);
			add_location(div, file, 196, 36, 6581);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*tea*/ ctx[9].towns + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*tea*/ ctx[9].towns, /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(196:32) {#if typeof tea.towns === 'string'}",
		ctx
	});

	return block;
}

// (205:40) {#each tea.towns as towns}
function create_each_block_3(ctx) {
	let li;
	let t0_value = /*towns*/ ctx[15] + "";
	let t0;
	let t1;
	let t2_value = getPinyin(/*towns*/ ctx[15], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = text$1(" - ");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_text(li_nodes, " - ");
			t2 = claim_text(li_nodes, t2_value);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 205, 44, 7075);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*towns*/ ctx[15] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*towns*/ ctx[15], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(205:40) {#each tea.towns as towns}",
		ctx
	});

	return block;
}

// (232:28) {:else}
function create_else_block_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text$1("-");
		},
		l: function claim(nodes) {
			t = claim_text(nodes, "-");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(232:28) {:else}",
		ctx
	});

	return block;
}

// (215:28) {#if tea.pickings}
function create_if_block(ctx) {
	let if_block_anchor;

	function select_block_type_8(ctx, dirty) {
		if (typeof /*tea*/ ctx[9].pickings === "string") return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type_8(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_8(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(215:28) {#if tea.pickings}",
		ctx
	});

	return block;
}

// (223:32) {:else}
function create_else_block(ctx) {
	let ul;
	let each_value_2 = /*tea*/ ctx[9].pickings;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(ul, "class", "svelte-ycjrao");
			add_location(ul, file, 223, 36, 7980);
		},
		m: function mount(target, anchor) {
			insert_dev(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*getPinyin, getTeasByType, typeToDisplay, typeParam, types, teas, i18n*/ 63) {
				each_value_2 = /*tea*/ ctx[9].pickings;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(ul);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(223:32) {:else}",
		ctx
	});

	return block;
}

// (216:32) {#if typeof tea.pickings === 'string'}
function create_if_block_1(ctx) {
	let div;
	let p0;
	let t0_value = /*tea*/ ctx[9].pickings + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*tea*/ ctx[9].pickings, /*i18n*/ ctx[3]) + "";
	let t2;

	const block = {
		c: function create() {
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 217, 40, 7642);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 218, 40, 7721);
			add_location(div, file, 216, 36, 7596);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*tea*/ ctx[9].pickings + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*tea*/ ctx[9].pickings, /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(216:32) {#if typeof tea.pickings === 'string'}",
		ctx
	});

	return block;
}

// (225:40) {#each tea.pickings as pick}
function create_each_block_2(ctx) {
	let li;
	let t0_value = /*pick*/ ctx[12] + "";
	let t0;
	let t1;
	let t2_value = getPinyin(/*pick*/ ctx[12], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;

	const block = {
		c: function create() {
			li = element("li");
			t0 = text$1(t0_value);
			t1 = text$1(" - ");
			t2 = text$1(t2_value);
			t3 = space();
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t0 = claim_text(li_nodes, t0_value);
			t1 = claim_text(li_nodes, " - ");
			t2 = claim_text(li_nodes, t2_value);
			t3 = claim_space(li_nodes);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(li, file, 225, 44, 8098);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t0);
			append_dev(li, t1);
			append_dev(li, t2);
			append_dev(li, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*pick*/ ctx[12] + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*pick*/ ctx[12], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(225:40) {#each tea.pickings as pick}",
		ctx
	});

	return block;
}

// (129:16) {#each getTeasByType(type, teas) as tea}
function create_each_block_1(ctx) {
	let tr;
	let td0;
	let a;
	let div;
	let p0;
	let t0_value = /*tea*/ ctx[9].ideogram + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*tea*/ ctx[9].ideogram, /*i18n*/ ctx[3]) + "";
	let t2;
	let a_href_value;
	let t3;
	let td1;
	let t4;
	let td2;
	let t5_value = (/*tea*/ ctx[9].harvests || "-") + "";
	let t5;
	let t6;
	let td3;
	let t7;
	let td4;
	let t8;
	let td5;
	let t9;
	let td6;
	let t10;
	let td7;
	let t11_value = (/*tea*/ ctx[9].elevations || "-") + "";
	let t11;
	let t12;
	let td8;
	let t13_value = (/*tea*/ ctx[9].oxidations || "-") + "";
	let t13;
	let t14;

	function select_block_type(ctx, dirty) {
		if (/*tea*/ ctx[9].families) return create_if_block_8;
		return create_else_block_8;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_1(ctx, dirty) {
		if (/*tea*/ ctx[9].cultivars) return create_if_block_6;
		return create_else_block_7;
	}

	let current_block_type_1 = select_block_type_1(ctx);
	let if_block1 = current_block_type_1(ctx);

	function select_block_type_3(ctx, dirty) {
		if (/*tea*/ ctx[9].provinces) return create_if_block_4;
		return create_else_block_5;
	}

	let current_block_type_2 = select_block_type_3(ctx);
	let if_block2 = current_block_type_2(ctx);

	function select_block_type_5(ctx, dirty) {
		if (/*tea*/ ctx[9].towns) return create_if_block_2;
		return create_else_block_3;
	}

	let current_block_type_3 = select_block_type_5(ctx);
	let if_block3 = current_block_type_3(ctx);

	function select_block_type_7(ctx, dirty) {
		if (/*tea*/ ctx[9].pickings) return create_if_block;
		return create_else_block_1;
	}

	let current_block_type_4 = select_block_type_7(ctx);
	let if_block4 = current_block_type_4(ctx);

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			a = element("a");
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			td1 = element("td");
			if_block0.c();
			t4 = space();
			td2 = element("td");
			t5 = text$1(t5_value);
			t6 = space();
			td3 = element("td");
			if_block1.c();
			t7 = space();
			td4 = element("td");
			if_block2.c();
			t8 = space();
			td5 = element("td");
			if_block3.c();
			t9 = space();
			td6 = element("td");
			if_block4.c();
			t10 = space();
			td7 = element("td");
			t11 = text$1(t11_value);
			t12 = space();
			td8 = element("td");
			t13 = text$1(t13_value);
			t14 = space();
			this.h();
		},
		l: function claim(nodes) {
			tr = claim_element(nodes, "TR", {});
			var tr_nodes = children(tr);
			td0 = claim_element(tr_nodes, "TD", { class: true });
			var td0_nodes = children(td0);
			a = claim_element(td0_nodes, "A", { href: true });
			var a_nodes = children(a);
			div = claim_element(a_nodes, "DIV", {});
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			a_nodes.forEach(detach_dev);
			td0_nodes.forEach(detach_dev);
			t3 = claim_space(tr_nodes);
			td1 = claim_element(tr_nodes, "TD", { class: true });
			var td1_nodes = children(td1);
			if_block0.l(td1_nodes);
			td1_nodes.forEach(detach_dev);
			t4 = claim_space(tr_nodes);
			td2 = claim_element(tr_nodes, "TD", { class: true });
			var td2_nodes = children(td2);
			t5 = claim_text(td2_nodes, t5_value);
			td2_nodes.forEach(detach_dev);
			t6 = claim_space(tr_nodes);
			td3 = claim_element(tr_nodes, "TD", { class: true });
			var td3_nodes = children(td3);
			if_block1.l(td3_nodes);
			td3_nodes.forEach(detach_dev);
			t7 = claim_space(tr_nodes);
			td4 = claim_element(tr_nodes, "TD", { class: true });
			var td4_nodes = children(td4);
			if_block2.l(td4_nodes);
			td4_nodes.forEach(detach_dev);
			t8 = claim_space(tr_nodes);
			td5 = claim_element(tr_nodes, "TD", { class: true });
			var td5_nodes = children(td5);
			if_block3.l(td5_nodes);
			td5_nodes.forEach(detach_dev);
			t9 = claim_space(tr_nodes);
			td6 = claim_element(tr_nodes, "TD", { class: true });
			var td6_nodes = children(td6);
			if_block4.l(td6_nodes);
			td6_nodes.forEach(detach_dev);
			t10 = claim_space(tr_nodes);
			td7 = claim_element(tr_nodes, "TD", { class: true });
			var td7_nodes = children(td7);
			t11 = claim_text(td7_nodes, t11_value);
			td7_nodes.forEach(detach_dev);
			t12 = claim_space(tr_nodes);
			td8 = claim_element(tr_nodes, "TD", { class: true });
			var td8_nodes = children(td8);
			t13 = claim_text(td8_nodes, t13_value);
			td8_nodes.forEach(detach_dev);
			t14 = claim_space(tr_nodes);
			tr_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 133, 36, 3375);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 134, 36, 3450);
			add_location(div, file, 132, 32, 3333);
			attr_dev(a, "href", a_href_value = "fiche-" + /*tea*/ ctx[9].ideogram);
			add_location(a, file, 131, 28, 3269);
			attr_dev(td0, "class", "svelte-ycjrao");
			add_location(td0, file, 130, 24, 3236);
			attr_dev(td1, "class", "svelte-ycjrao");
			add_location(td1, file, 140, 24, 3708);
			attr_dev(td2, "class", "svelte-ycjrao");
			add_location(td2, file, 152, 24, 4291);
			attr_dev(td3, "class", "svelte-ycjrao");
			add_location(td3, file, 153, 24, 4346);
			attr_dev(td4, "class", "svelte-ycjrao");
			add_location(td4, file, 173, 24, 5387);
			attr_dev(td5, "class", "svelte-ycjrao");
			add_location(td5, file, 193, 24, 6428);
			attr_dev(td6, "class", "svelte-ycjrao");
			add_location(td6, file, 213, 24, 7437);
			attr_dev(td7, "class", "svelte-ycjrao");
			add_location(td7, file, 233, 24, 8458);
			attr_dev(td8, "class", "svelte-ycjrao");
			add_location(td8, file, 234, 24, 8515);
			add_location(tr, file, 129, 20, 3207);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, a);
			append_dev(a, div);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(tr, t3);
			append_dev(tr, td1);
			if_block0.m(td1, null);
			append_dev(tr, t4);
			append_dev(tr, td2);
			append_dev(td2, t5);
			append_dev(tr, t6);
			append_dev(tr, td3);
			if_block1.m(td3, null);
			append_dev(tr, t7);
			append_dev(tr, td4);
			if_block2.m(td4, null);
			append_dev(tr, t8);
			append_dev(tr, td5);
			if_block3.m(td5, null);
			append_dev(tr, t9);
			append_dev(tr, td6);
			if_block4.m(td6, null);
			append_dev(tr, t10);
			append_dev(tr, td7);
			append_dev(td7, t11);
			append_dev(tr, t12);
			append_dev(tr, td8);
			append_dev(td8, t13);
			append_dev(tr, t14);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*typeParam, types, teas*/ 7 && t0_value !== (t0_value = /*tea*/ ctx[9].ideogram + "")) set_data_dev(t0, t0_value);
			if (dirty & /*typeParam, types, teas, i18n*/ 15 && t2_value !== (t2_value = getPinyin(/*tea*/ ctx[9].ideogram, /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);

			if (dirty & /*typeParam, types, teas*/ 7 && a_href_value !== (a_href_value = "fiche-" + /*tea*/ ctx[9].ideogram)) {
				attr_dev(a, "href", a_href_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(td1, null);
				}
			}

			if (dirty & /*typeParam, types, teas*/ 7 && t5_value !== (t5_value = (/*tea*/ ctx[9].harvests || "-") + "")) set_data_dev(t5, t5_value);

			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(td3, null);
				}
			}

			if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx)) && if_block2) {
				if_block2.p(ctx, dirty);
			} else {
				if_block2.d(1);
				if_block2 = current_block_type_2(ctx);

				if (if_block2) {
					if_block2.c();
					if_block2.m(td4, null);
				}
			}

			if (current_block_type_3 === (current_block_type_3 = select_block_type_5(ctx)) && if_block3) {
				if_block3.p(ctx, dirty);
			} else {
				if_block3.d(1);
				if_block3 = current_block_type_3(ctx);

				if (if_block3) {
					if_block3.c();
					if_block3.m(td5, null);
				}
			}

			if (current_block_type_4 === (current_block_type_4 = select_block_type_7(ctx)) && if_block4) {
				if_block4.p(ctx, dirty);
			} else {
				if_block4.d(1);
				if_block4 = current_block_type_4(ctx);

				if (if_block4) {
					if_block4.c();
					if_block4.m(td6, null);
				}
			}

			if (dirty & /*typeParam, types, teas*/ 7 && t11_value !== (t11_value = (/*tea*/ ctx[9].elevations || "-") + "")) set_data_dev(t11, t11_value);
			if (dirty & /*typeParam, types, teas*/ 7 && t13_value !== (t13_value = (/*tea*/ ctx[9].oxidations || "-") + "")) set_data_dev(t13, t13_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if_block0.d();
			if_block1.d();
			if_block2.d();
			if_block3.d();
			if_block4.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(129:16) {#each getTeasByType(type, teas) as tea}",
		ctx
	});

	return block;
}

// (106:4) {#each typeToDisplay(typeParam, types) as type}
function create_each_block(ctx) {
	let h3;
	let div;
	let p0;
	let t0_value = /*type*/ ctx[6] + "";
	let t0;
	let t1;
	let p1;
	let t2_value = getPinyin(/*type*/ ctx[6], /*i18n*/ ctx[3]) + "";
	let t2;
	let t3;
	let h3_id_value;
	let t4;
	let table;
	let thead;
	let tr;
	let th0;
	let t5;
	let t6;
	let th1;
	let t7;
	let t8;
	let th2;
	let t9;
	let t10;
	let th3;
	let t11;
	let t12;
	let th4;
	let t13;
	let t14;
	let th5;
	let t15;
	let t16;
	let th6;
	let t17;
	let t18;
	let th7;
	let t19;
	let t20;
	let th8;
	let t21;
	let t22;
	let tbody;
	let t23;
	let current;

	const iconteatype = new IconTeaType({
			props: { type: /*type*/ ctx[6] },
			$$inline: true
		});

	let each_value_1 = /*getTeasByType*/ ctx[5](/*type*/ ctx[6], /*teas*/ ctx[1]);
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_1_else_1 = null;

	if (!each_value_1.length) {
		each_1_else_1 = create_else_block_9(ctx);
	}

	const block = {
		c: function create() {
			h3 = element("h3");
			div = element("div");
			p0 = element("p");
			t0 = text$1(t0_value);
			t1 = space();
			p1 = element("p");
			t2 = text$1(t2_value);
			t3 = space();
			create_component(iconteatype.$$.fragment);
			t4 = space();
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			t5 = text$1("nom");
			t6 = space();
			th1 = element("th");
			t7 = text$1("familles");
			t8 = space();
			th2 = element("th");
			t9 = text$1("récoltes");
			t10 = space();
			th3 = element("th");
			t11 = text$1("cultivarss");
			t12 = space();
			th4 = element("th");
			t13 = text$1("provinces");
			t14 = space();
			th5 = element("th");
			t15 = text$1("villes");
			t16 = space();
			th6 = element("th");
			t17 = text$1("ceuillettes");
			t18 = space();
			th7 = element("th");
			t19 = text$1("altitudes");
			t20 = space();
			th8 = element("th");
			t21 = text$1("oxydations");
			t22 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else_1) {
				each_1_else_1.c();
			}

			t23 = space();
			this.h();
		},
		l: function claim(nodes) {
			h3 = claim_element(nodes, "H3", { id: true, class: true });
			var h3_nodes = children(h3);
			div = claim_element(h3_nodes, "DIV", { class: true });
			var div_nodes = children(div);
			p0 = claim_element(div_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t0 = claim_text(p0_nodes, t0_value);
			p0_nodes.forEach(detach_dev);
			t1 = claim_space(div_nodes);
			p1 = claim_element(div_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t2 = claim_text(p1_nodes, t2_value);
			p1_nodes.forEach(detach_dev);
			div_nodes.forEach(detach_dev);
			t3 = claim_space(h3_nodes);
			claim_component(iconteatype.$$.fragment, h3_nodes);
			h3_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			table = claim_element(nodes, "TABLE", {});
			var table_nodes = children(table);
			thead = claim_element(table_nodes, "THEAD", {});
			var thead_nodes = children(thead);
			tr = claim_element(thead_nodes, "TR", {});
			var tr_nodes = children(tr);
			th0 = claim_element(tr_nodes, "TH", { class: true });
			var th0_nodes = children(th0);
			t5 = claim_text(th0_nodes, "nom");
			th0_nodes.forEach(detach_dev);
			t6 = claim_space(tr_nodes);
			th1 = claim_element(tr_nodes, "TH", { class: true });
			var th1_nodes = children(th1);
			t7 = claim_text(th1_nodes, "familles");
			th1_nodes.forEach(detach_dev);
			t8 = claim_space(tr_nodes);
			th2 = claim_element(tr_nodes, "TH", { class: true });
			var th2_nodes = children(th2);
			t9 = claim_text(th2_nodes, "récoltes");
			th2_nodes.forEach(detach_dev);
			t10 = claim_space(tr_nodes);
			th3 = claim_element(tr_nodes, "TH", { class: true });
			var th3_nodes = children(th3);
			t11 = claim_text(th3_nodes, "cultivarss");
			th3_nodes.forEach(detach_dev);
			t12 = claim_space(tr_nodes);
			th4 = claim_element(tr_nodes, "TH", { class: true });
			var th4_nodes = children(th4);
			t13 = claim_text(th4_nodes, "provinces");
			th4_nodes.forEach(detach_dev);
			t14 = claim_space(tr_nodes);
			th5 = claim_element(tr_nodes, "TH", { class: true });
			var th5_nodes = children(th5);
			t15 = claim_text(th5_nodes, "villes");
			th5_nodes.forEach(detach_dev);
			t16 = claim_space(tr_nodes);
			th6 = claim_element(tr_nodes, "TH", { class: true });
			var th6_nodes = children(th6);
			t17 = claim_text(th6_nodes, "ceuillettes");
			th6_nodes.forEach(detach_dev);
			t18 = claim_space(tr_nodes);
			th7 = claim_element(tr_nodes, "TH", { class: true });
			var th7_nodes = children(th7);
			t19 = claim_text(th7_nodes, "altitudes");
			th7_nodes.forEach(detach_dev);
			t20 = claim_space(tr_nodes);
			th8 = claim_element(tr_nodes, "TH", { class: true });
			var th8_nodes = children(th8);
			t21 = claim_text(th8_nodes, "oxydations");
			th8_nodes.forEach(detach_dev);
			tr_nodes.forEach(detach_dev);
			thead_nodes.forEach(detach_dev);
			t22 = claim_space(table_nodes);
			tbody = claim_element(table_nodes, "TBODY", {});
			var tbody_nodes = children(tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(tbody_nodes);
			}

			if (each_1_else_1) {
				each_1_else_1.l(tbody_nodes);
			}

			tbody_nodes.forEach(detach_dev);
			t23 = claim_space(table_nodes);
			table_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p0, "class", "ideogram svelte-ycjrao");
			add_location(p0, file, 108, 16, 2505);
			attr_dev(p1, "class", "pinyin svelte-ycjrao");
			add_location(p1, file, 109, 16, 2552);
			attr_dev(div, "class", "ideogram-pinyin svelte-ycjrao");
			add_location(div, file, 107, 12, 2459);
			attr_dev(h3, "id", h3_id_value = /*type*/ ctx[6]);
			attr_dev(h3, "class", "svelte-ycjrao");
			add_location(h3, file, 106, 8, 2430);
			attr_dev(th0, "class", "svelte-ycjrao");
			add_location(th0, file, 116, 20, 2743);
			attr_dev(th1, "class", "svelte-ycjrao");
			add_location(th1, file, 117, 20, 2776);
			attr_dev(th2, "class", "svelte-ycjrao");
			add_location(th2, file, 118, 20, 2814);
			attr_dev(th3, "class", "svelte-ycjrao");
			add_location(th3, file, 119, 20, 2852);
			attr_dev(th4, "class", "svelte-ycjrao");
			add_location(th4, file, 120, 20, 2892);
			attr_dev(th5, "class", "svelte-ycjrao");
			add_location(th5, file, 121, 20, 2931);
			attr_dev(th6, "class", "svelte-ycjrao");
			add_location(th6, file, 122, 20, 2967);
			attr_dev(th7, "class", "svelte-ycjrao");
			add_location(th7, file, 123, 20, 3008);
			attr_dev(th8, "class", "svelte-ycjrao");
			add_location(th8, file, 124, 20, 3047);
			add_location(tr, file, 115, 16, 2718);
			add_location(thead, file, 114, 12, 2694);
			add_location(tbody, file, 127, 12, 3122);
			add_location(table, file, 113, 8, 2674);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h3, anchor);
			append_dev(h3, div);
			append_dev(div, p0);
			append_dev(p0, t0);
			append_dev(div, t1);
			append_dev(div, p1);
			append_dev(p1, t2);
			append_dev(h3, t3);
			mount_component(iconteatype, h3, null);
			insert_dev(target, t4, anchor);
			insert_dev(target, table, anchor);
			append_dev(table, thead);
			append_dev(thead, tr);
			append_dev(tr, th0);
			append_dev(th0, t5);
			append_dev(tr, t6);
			append_dev(tr, th1);
			append_dev(th1, t7);
			append_dev(tr, t8);
			append_dev(tr, th2);
			append_dev(th2, t9);
			append_dev(tr, t10);
			append_dev(tr, th3);
			append_dev(th3, t11);
			append_dev(tr, t12);
			append_dev(tr, th4);
			append_dev(th4, t13);
			append_dev(tr, t14);
			append_dev(tr, th5);
			append_dev(th5, t15);
			append_dev(tr, t16);
			append_dev(tr, th6);
			append_dev(th6, t17);
			append_dev(tr, t18);
			append_dev(tr, th7);
			append_dev(th7, t19);
			append_dev(tr, t20);
			append_dev(tr, th8);
			append_dev(th8, t21);
			append_dev(table, t22);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			if (each_1_else_1) {
				each_1_else_1.m(tbody, null);
			}

			append_dev(table, t23);
			current = true;
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty & /*typeParam, types*/ 5) && t0_value !== (t0_value = /*type*/ ctx[6] + "")) set_data_dev(t0, t0_value);
			if ((!current || dirty & /*typeParam, types, i18n*/ 13) && t2_value !== (t2_value = getPinyin(/*type*/ ctx[6], /*i18n*/ ctx[3]) + "")) set_data_dev(t2, t2_value);
			const iconteatype_changes = {};
			if (dirty & /*typeParam, types*/ 5) iconteatype_changes.type = /*type*/ ctx[6];
			iconteatype.$set(iconteatype_changes);

			if (!current || dirty & /*typeParam, types*/ 5 && h3_id_value !== (h3_id_value = /*type*/ ctx[6])) {
				attr_dev(h3, "id", h3_id_value);
			}

			if (dirty & /*getTeasByType, typeToDisplay, typeParam, types, teas, getPinyin, i18n*/ 63) {
				each_value_1 = /*getTeasByType*/ ctx[5](/*type*/ ctx[6], /*teas*/ ctx[1]);
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;

				if (each_value_1.length) {
					if (each_1_else_1) {
						each_1_else_1.d(1);
						each_1_else_1 = null;
					}
				} else if (!each_1_else_1) {
					each_1_else_1 = create_else_block_9(ctx);
					each_1_else_1.c();
					each_1_else_1.m(tbody, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(iconteatype.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(iconteatype.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h3);
			destroy_component(iconteatype);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(table);
			destroy_each(each_blocks, detaching);
			if (each_1_else_1) each_1_else_1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(106:4) {#each typeToDisplay(typeParam, types) as type}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let h2;
	let t0;
	let t1;
	let p;
	let t2;
	let t3;
	let t4;
	let div;
	let current;
	let each_value = /*typeToDisplay*/ ctx[4](/*typeParam*/ ctx[0], /*types*/ ctx[2]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	let each_1_else = null;

	if (!each_value.length) {
		each_1_else = create_else_block_10(ctx);
	}

	const block = {
		c: function create() {
			h2 = element("h2");
			t0 = text$1("Liste des thés par type");
			t1 = space();
			p = element("p");
			t2 = text$1("Cette liste regroupe l'ensemble des thés proposés sur le site. Pour voir le\n    détail d'un thé suivez le lien sur son nom.");
			t3 = space();
			t4 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			this.h();
		},
		l: function claim(nodes) {
			h2 = claim_element(nodes, "H2", {});
			var h2_nodes = children(h2);
			t0 = claim_text(h2_nodes, "Liste des thés par type");
			h2_nodes.forEach(detach_dev);
			t1 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "Cette liste regroupe l'ensemble des thés proposés sur le site. Pour voir le\n    détail d'un thé suivez le lien sur son nom.");
			p_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			const head_nodes = query_selector_all("[data-svelte=\"svelte-169ihpq\"]", document.head);
			head_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			if (each_1_else) {
				each_1_else.l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			add_location(h2, file, 95, 0, 2117);
			attr_dev(p, "class", "svelte-ycjrao");
			add_location(p, file, 96, 0, 2150);
			document.title = "Liste des thés";
			attr_dev(div, "class", "teas svelte-ycjrao");
			add_location(div, file, 104, 0, 2351);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h2, anchor);
			append_dev(h2, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, t4, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			if (each_1_else) {
				each_1_else.m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*getTeasByType, typeToDisplay, typeParam, types, teas, getPinyin, i18n*/ 63) {
				each_value = /*typeToDisplay*/ ctx[4](/*typeParam*/ ctx[0], /*types*/ ctx[2]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();

				if (each_value.length) {
					if (each_1_else) {
						each_1_else.d(1);
						each_1_else = null;
					}
				} else if (!each_1_else) {
					each_1_else = create_else_block_10(ctx);
					each_1_else.c();
					each_1_else.m(div, null);
				}
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function preload(page) {
	return { typeParam: page.params.type };
}

function getPinyin(text, i18n) {
	const term = i18n.filter(term => term.ideogram === text)[0] || {};
	return "pinyin" in term ? term.pinyin : "-";
}

function instance($$self, $$props, $$invalidate) {
	let { typeParam } = $$props;
	let teas = [];
	let types = [];
	let i18n = [];

	onMount(async () => {
		const res = await fetch("https://api-tea.oisiflorus.com/api/v1/teas");

		if (res.ok) {
			$$invalidate(1, teas = (await res.json()).api);
		} else {
			throw new Error(text);
		}

		const res1 = await fetch("https://api-tea.oisiflorus.com/api/v1/type");

		if (res1.ok) {
			$$invalidate(2, types = (await res1.json()).api.map(type => type.ideogram));
		} else {
			throw new Error(text);
		}

		const res2 = await fetch(`https://api-tea.oisiflorus.com/api/v1/pinyin`);

		if (res2.ok) {
			$$invalidate(3, i18n = (await res2.json()).api);
		} else {
			// 404
			throw new Error(text);
		}
	});

	const typeToDisplay = () => types.includes(typeParam) ? [typeParam] : types;
	const getTeasByType = (type, teas) => teas.filter(tea => tea.type === type);
	const writable_props = ["typeParam"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Liste_des_thes_u5Btypeu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Liste_des_thes_u5Btypeu5D", $$slots, []);

	$$self.$set = $$props => {
		if ("typeParam" in $$props) $$invalidate(0, typeParam = $$props.typeParam);
	};

	$$self.$capture_state = () => ({
		preload,
		onMount,
		IconTeaType,
		typeParam,
		teas,
		types,
		i18n,
		typeToDisplay,
		getTeasByType,
		getPinyin
	});

	$$self.$inject_state = $$props => {
		if ("typeParam" in $$props) $$invalidate(0, typeParam = $$props.typeParam);
		if ("teas" in $$props) $$invalidate(1, teas = $$props.teas);
		if ("types" in $$props) $$invalidate(2, types = $$props.types);
		if ("i18n" in $$props) $$invalidate(3, i18n = $$props.i18n);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [typeParam, teas, types, i18n, typeToDisplay, getTeasByType];
}

class Liste_des_thes_u5Btypeu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { typeParam: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Liste_des_thes_u5Btypeu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*typeParam*/ ctx[0] === undefined && !("typeParam" in props)) {
			console.warn("<Liste_des_thes_u5Btypeu5D> was created without expected prop 'typeParam'");
		}
	}

	get typeParam() {
		throw new Error_1("<Liste_des_thes_u5Btypeu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set typeParam(value) {
		throw new Error_1("<Liste_des_thes_u5Btypeu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Liste_des_thes_u5Btypeu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
